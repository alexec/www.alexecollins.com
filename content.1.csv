1312862231€Java 7€If you work in IT, then unless you've been living under a rock for the last couple of years, then you will have known about the recent release of Java 7. Here's a quick summary of some of its new features:

- A set of changes in syntax that will hopefully reduce code scaffolding, this includes strings in switches, terser try/catch statements and improved type inference.
- Perhaps as a counter to new JVM based dynamic languages (such as Groovy): support for dynamically-typed languages in the JVM itself.
- Another attempt to make multi-threaded apps easier with the fork/join framework.
- NIO.2 (if you call a new implementation "new", when you replace it you're stuck with an odd name).

I'm already looking forward to Java 8 in 2012, especially the deferred functional closures from Project Lambda.™1312862541€About Me€I've been working in e-gaming software for eight years, previously in solutions architect and technical lead roles for OpenBet. I've worked for just about every UK bookmaker you can name (Ladbrokes, William Hill, Paddy Power and Tote to name a couple) as well as international companies such as Bodog and Betway. I've also worked with compliance is the UK, Spain, Italy and New Jersey.

At the moment I'm working as a team lead at Gamesys.

Technology wise, I'm interested Java, Groovy, Spring, UNIX/Linux, PostgreSQL, MySQL, HTML5 etc...

I've lived in London since 2002.™1312863405€Software€<h2>Maven Script Plugin</h1>

A Maven plugin for running scripts as part of your build. <a href="https://github.com/alexec/script-maven-plugin">more...</a>

<h2>Maven VBox Plugin</h1>

A Maven plugin that creates and provisions VirtualBox VMs. <a href="https://github.com/alexec/maven-vbox-plugin">more...</a>

<h2>Secure Edit</h2>

A simple plain text editor that encrypts the files you edit in it. <a href="?q=content/secure-edit">more...</a>

<h2>Link Checker</h2>

A simple web site link checker. <a href="?q=content/web-site-link-checker">more...</a>

<h2>MSN to XMPP Adapter</h2>

An application to allow iChat users to speak to their MSN colleagues. <a href="https://sourceforge.net/projects/javaxmppframewo/">more..</a>

<h2>Unified Static Content Compressor</h2>

An application to compress web site's static content to provide performance improvements. <a href="?q=content/unified-static-content-compressor">more...</a>

<h2>Stretch for 60s</h2>

A small tool (web page) that counts for 60 .. 0 and make a beep noise, for timing stretches. <a href="?q=content/stretch-60s">more...</a>™1312978929€Open Web Application Security Project (OWASP)€TODO

See:
https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project™1312979297€Robust Cronjobs€<p>Cron jobs were the bane of my life. They were fragile, unreliable, time consuming to test, hard to fix. If some failed then they were impossible to re-run. No performance metrics were collected and no monitoring was undertaken. Ultimately they were costly to write, and as no one knew what they did, costly to maintain.</p>

<p>Here's some quick tips on writing robust cron jobs.</p>

<ol>
<li>Considering break your app into two parts: one that does the actual work, and a wrapper script one that sets up the environment, adds logging and error handling.</li>
<li>Use the same bash script wrapper and (if possible) configuration on every environment. Otherwise you're not testing the wrapper and you cannot tell if it will worked until you run it in production.</li>
<li>Write the app so that it can take parameters for the time frame it should have run for. This will make it easy to test: you can then test it to see how it would have behaved at various times.</li>
<li>Make it idempotent so you can repeat each test easily, and if it fails, it can safely be re-run.</li>
<li>Consider sourcing ~/.bashrc in your shell wrapper so that your app runs in a similar env in a shell to that when it'll be run by the daemon.</li>
<li>If you develop on one machine (e.g. Linux), and deploy to another (e.g. UNIX), then make sure you take this into account. Try and develop scripts that will run in any environment.</li>
<li>You can test it using "cd && env - myapp" so that it is run in the same working directory and a <I>similar</i> env as when it runs as a cron.
<li>Log output to a log file (e.g. /var/log/$USER/myapp.out), but remember some errors (e.g. stack traces from you apps main thread) are written to stout or stderr. Handily they will be delivered to the user's UNIX mailbox. You set-up ~/.forward so you can also get a copy in your in-box. Make sure the error is helpful, add the hostname and command for example. Don't forget to rotate, compress and archive your logs.</li>
<li>Consider recording reporting metrics from the app. How long it took to run, how many records it processed. These are useful for debugging, and also useful for monitoring performance over longer periods of time, or creating alarms.</li>
<li>Document, but not in some obscure, hard to find and un-maintanable article in your corporate intranet. Perhaps document in a README.txt AND the app's help, which could be accessible using a "-h" option.</li>
</ol>

<p>Here's an simple example:</p>

<code>
#! /bin/sh
set -eu

function usage {
	echo >&2 "Usage: $0 [-n ndayago]"
}

while getopts n: o ; do
	case "$o" in
	n)	NDAYSAGO="$OPTARG";;
	[?])	usage
		exit 1;;
	esac
done
shift $(($OPTIND-1))

# there's no default for -n, so exit if not set
if [ -z "${NDAYSAGO:-}" ] ; then usage ; exit 1 ; fi

find $TMPDIR -type f -mtime $NDAYSAGO
</code>

<p>To test this, you can try:</p>

<code>
% cd && env - USER=alexec TMPDIR=$TMPDIR /Users/$USER/bin/find-changed-in-tmp.sh -n 1 > /var/log/$USER/find-changed-in-tmp.$(date +%Y-%m-%d).out
</code>

<p>Note that I need to add the USER and TMPDIR as "env -" will erase them. The resulting crontab entry is:</p>

<code>
38 3 * * * /Users/$USER/bin/find-changed-in-tmp.sh -n 1 >> /var/log/$USER/find-changed-in-tmp.$(date +\\%Y-\\%m-\\%d).out 
</code>

<p>Note that I have to escape the percentage symbols, and that I append to the log file so re-runs won't erase the old logs.</p>

<p>If you enjoyed this post, you might be interested in <a href="?q=content/tips-robust-bash-scripts">this one on robust scripts</a>.</p>™1313446911€Give the Developer a Gun€I believe that if you're given a set of tools to do a job, you'll often try them all before using the correct one for the job. There's not such thing as a good developer, just one that does what they're asked to do and ones that don't, So, if there's no feedback between the way that they do their job (promotion and renumeration) and the type of job you want them to do (presumably few bugs and cheap to maintain), then you can't expect them to do the job you want them to do.

If you allow someone to commit code to your SCM that doesn't need to be statically checked, that does not have to have automated tests written for it, isn't expected to write code/commit comments, that isn't peer reviewed and where that review process feeds back then you should assume that you're going the get.

<ol>
<li>Code that doesn't compile and as a direct result will be prone to bugs.</li>
<li>Code that's not been tested well, and - because code that is not designed for testing is not easy to test - will be expensive to maintain.</li>
</ol>

If people are rewarded for doing the job quickly, not well, then you'll be looking a mess that is expensive to maintain.

One mans "work around" is another's "hack" and someone else's "attack".

If you give the developer a gun, he won't shot himself or you. He'll make a mess of your code.™1313483982€Page Speed no Longer Recommends Combining Resources€New Page Speed suggestions:

<ul>
<li>Use an Application Cache
<li>Eliminate unnecessary reflows
<li>Avoid excessive serialization
<li>Avoid long-running scripts
</ul>

http://pagespeed-velocity2011.appspot.com/™1313745769€Ant Best Practices€http://www.onjava.com/pub/a/onjava/2003/12/17/ant_bestpractices.html™1314125383€Snippet: AspectJ and Ant€<p>I've just started working with AspectJ and despite its non-intuitive syntax, I'm pretty sold on its effectiveness at reducing development time and complexity by factoring out crosscutting concerns such as logging and security. However, the Internet is a little lacking in guides and how to build it, so here's my how to. </p>

<p>1) Download AspectJ tools jar and save this into your ~/.ant/lib directory. </p>

<p>2) Add the XML namespace to the project element:</p>

<code><pre>&lt;project xmlns:aspectj="antlib:org.aspectj" ...</pre></code>

<p>Create a new compile target in your build.xml (you can see that I use Ivy for dependency management):</p>
<code><pre>	&lt;target name="compile.aspectj" depends="resolve"&gt;
		&lt;mkdir dir="${build}" /&gt;
		&lt;aspectj:iajc source="1.6" destDir="${build}"&gt;
			&lt;sourceroots&gt;
				&lt;pathelement location="${src}" /&gt;
			&lt;/sourceroots&gt;
			&lt;classpath&gt;
				&lt;fileset dir="${lib}"&gt;
					&lt;include name="**/*.jar" /&gt;
				&lt;/fileset&gt;
			&lt;/classpath&gt;
		&lt;/aspectj:iajc&gt;
	&lt;/target&gt;
</pre></code>

<p>Note: you may need to tell AspectJ to use target Java 6.</p>

<p>3) Factor out the javac element into it's own "compile.javac" task, this will allow you to revert to javac easily:</p>

<code><pre>	&lt;target name="compile.javac" depends="resolve"&gt;
		&lt;mkdir dir="${build}" /&gt;
		&lt;javac srcdir="${src}" destdir="${build}" includeantruntime="false"&gt;
			&lt;classpath&gt;
				&lt;fileset dir="${lib}"&gt;
					&lt;include name="**/*.jar" /&gt;
				&lt;/fileset&gt;
			&lt;/classpath&gt;
		&lt;/javac&gt;
	&lt;/target&gt;
</pre></code>

<p>4) Make the "compile" target dependent on "compile.aspectj";</p>

<code><pre>	&lt;target name="compile" depends="compile.aspectj"&gt;
		&lt;copy todir="${build}"&gt;
			&lt;fileset dir="${src}" excludes="**/*.java" /&gt;
		&lt;/copy&gt;
	&lt;/target&gt;
</pre></code>

<p>5) Build it.</p>

<p>You might want to also download the AspectJ runtime in your build (e.g. using Ivy). </p>™1314432799€How RSA Got Hacked€A good article from Wired:

http://www.wired.com/threatlevel/2011/08/how-rsa-got-hacked/™1314915817€Beyond JUnit€JUnit is the defacto Java unit testing framework, but there's a couple of new (and not so new) frameworks out there for web development that might be of interest. Questions you might want to ask yourself prior to adoption:

<ul>
<li>Are they fast and easy to develop and therefore low cost?
<li>Are they fast to run and therefore encourage adoption?
<li>Do they require maintenance and therefore engender on going cost?
<li>Can I execute them in my nightly build?
<li>Do they ultimately allow you to write more bug free code, faster?
</ul>

<h2>Mockito</h2>

This is a mocking framework that makes it straight forward and fast to create mock backed tests. This reduces the cost of setting up databases and avoids writing your own. It seems the API isn't as stable as it might be, but it has a terse and intuitive syntax.

http://mockito.org/

<h2>SureAssert</h2>

SureAssert has an annotation based mechanism for writing tests. This makes it easy to write the tests, and an Eclipse plug-in means that your incremental builds are incrementally tested.

http://www.sureassert.com/

<h2>JS Test Driver</h2>
Similar to Selenium below, this allows you the create test cases for JavaScript using a JUnit style syntax. The main caveat is that you need to factor your tests suitably for testing, and most JavaScript I've seen is not like that.

http://code.google.com/p/js-test-driver/

<h2>Selenium</h2>

Selenium is a top-down browsers plug in and framework that allows you to record a set of macro-like actions within a browser along with a set of assertions on those actions. E.g.

<ol>
<li>Open page X.
<li>Click button Y.
<li>Expect text Z.
</ol>

It's nice because the tests are focussed on important scenarios (checking that pages really open and transactions actually occur), and can be exported as JUnit tests that can run as part of the nightly build. However. it's brittle and because it depends on the app running, slow.

http://seleniumhq.org/
™1315515493€Fruition€It's good to see something you worked on a while ago go live and get some recognition.

http://www.reviewed-casinos.com/news/ladbrokes-chinese-openbet.html™1315846180€Fix ColdFusion's Interminable "500 null" Page€When ColdFusion fails in certain fashions, e.g. syntactically incorrect cfscript, it doesn't always provide any reporting. It takes a bit of rooting around to find out that the /500.html page is shown to the user when this happens. However, if the onError function is missing (if you're using Application.cfc) or there is no cferror tag (in the case of Application.cfm), nothing is reported.

Solution: Create the appropriate function. 

This page should also log the attributes of cfcatch too. A good example comes with CF: /usr/local/coldfusion/wwwroot/WEB-INF/exception/detail.cfm

See: 
http://www.coldfusionjedi.com/index.cfm/2007/12/5/The-Complete-Guide-to-Adding-Error-Handling-to-Your-ColdFusion-Application™1316380102€"ORM an anti-pattern" Lets examine this.€I recently read an article via DZone, and was immediately drawn to the title.

I'd like to ignore the "anti-pattern" discussion, focus on the specific problems, and look at the root cause of those problems, and see what positives can we come up with.

<h2>"ORM writes some SQL for you, but you always ending up doing some SQL anyway, why not write all the boiler plate yourself?"</h2>

Fair comment. Why use two tools for a job, when just one will do? Are the two tools the same? While you can hand-roll all your SQL, there are benefits you don't get, which are expensive to add. For example. Caching. This can be as simple a few lines of configuration and some tuning. If you hand roll, hours of work. 

<em>Edit:</em> All the feedback I've had points to connection pooling being actually pretty easy to do in natively. So I've removed this section.

<h2>"SQL gives you control, why risk your ORM screwing that up?"</h2>

Did you know that you can get the ORM to log the SQL it runs? I'd say that you need to make sure any SQL that is executed is verified as sensible and performant, regardless of whether it is hand rolled, or generated. Would not doing this be a failure of due diligence?

<h2>"Why risk the performance with all this additional code?"</h2>

In my experience, performance issues have rarely had their root cause in code. It's been the network or the database. The former if often out of your control, the latter exists in both native SQL and ORM based solutions. 

Perhaps what were really talking about is pre-emptive optimisation? Would Knuth would have a thing or two to say about this?

Conversely, I'd recently discussed the benefit of both solution with the wallet tech lead at a games company. I was interested to find out they were replacing their ORM with JDBC code. "What was the reason" I asked? "Performance" was the reply. The right tool for the right job. If part of your application has high transactional throughput, then you are going to need a high performing solution. ORM does not solve this problem - it is not for you.

<h2>"ORM bring backs the whole record from the database, it's inefficient"</h2>

This is true. And in fact, there are plenty of situations that you won't want query in an OO fashion. For example - aggregation queries. Consider a simple example where ORM brings back too much data is when you've added a large varchar to a table that you don't need very often. But hang on - was it a design error to add the column to the table in the first place? Either way, in real life, you might find a large varchar column attached to a table that isn't going to move, that you don't want to bring back. Solutions? There's a couple. 

1) Not using it? Remove it from the object. In fact,  don't add columns etc until you need them. Keep your objects lean and save yourself time.
2) Add it. Is it really a problem? Might be a high read/write table, but then, does a large varchar belong on that table?
3) Is this a suitable time to use ORM? Might be time to revert to SQL.

<h2>Summary</h2>
The ORM debate is hardly over. There will always be people wanting to use it when it's not appropriate, and those not using it when it might be, and on a case by case basis, they may turn out to be right or wrong.

Interestingly, I wonder if it's a stepping stone to something else? Relational databases are going to be around for sometime yet, but is ORM the only solution to reducing boiler plate code?

Have I missed something? Let me know. I'd love to expand this out.™1316541135€Executing Groovy in ColdFusion€<p>There's plenty of articles on loading Java in CF, but none for Groovy. Here's my guide.</p>
<p>This first piece of code creates a persistent class loader (in  Application.cfc/onApplicationStart):</p>

<code><pre>
&lt;cfscript&gt;
	application.groovyClassLoader = createObject("java", "groovy.lang.GroovyClassLoader").init();
	l = directoryList(expandPath("lib"));
	for (i = 0; i &lt; l.size(); i++) {
	application.groovyClassLoader.addClasspath(l.get(i));
	}
&lt;/cfscript&gt;
</pre></code>
<p>The second is a function to load & instantiate Groovy classes:</p>
<code><pre>
&lt;cfscript&gt;
	function loadGroovyFile(groovyFile) {
		fl = CreateObject("java", "java.io.File").Init(JavaCast("String", groovyFile));
		return application.groovyClassLoader.parseClass(fl).newInstance();
	}
&lt;/cfscript&gt;
</pre></code>

You'll need to copy the groovy-all jar into CF's lib directory (/usr/local/coldfusion/lib) and restart CF so that it's aware of it.

Next, a Groovy class (HelloWorld.groovy):
<code><pre>
class HelloWorld {
    String sayHello() {
        return "Hello World!"
    }
}
</pre></code>
<p>Finally you can create a .cfm page (e.g. HelloWorld.cfm):</.>
<code><pre>
&lt;cfset hw = loadGroovyFile("HelloWorld.groovy")&gt;
&lt;cfoutput&gt;#hw.sayHello()#&lt;/cfoutput&gt;
</pre></code>™1317898245€HTML5€The amount of buzz around HTML5 (aka "the death of Adobe flash") is growing. Some hand picked links:

http://www.dzone.com/links/r/free_ebook_dive_into_html5.html
http://www.quirksmode.org/dom/html5.html
http://webdesignledger.com/resources/7-useful-resources-to-help-you-learn-html5

I'll update this as I learn more.™1320098273€Unified Static Content Compressor€<p>A while ago I wrote a small build wrapper that provides a command line compressor using YUI and Google's HTML Compressor. Pretty simple:</p>

<ol>
<li>Build using ant</li>
<li>Run jar to compress CSS, HTML and JS.</li>
</ol>

<p>https://sourceforge.net/projects/unifiedcomp/</p>
™1321005152€Snippet: AppDynamics Lite /etc/init.d/appdynamics€<p>More for personal reference than anything else. I'm using it with ColdFusion. It could do with some tweaks (e.g. making sure it started, and stopped).</p>

<code><pre>
#! /bin/sh

N="AppDynamics Viewer"
D="/home/AppDynamicsLite/LiteViewer"
C="java -jar adlite-viewer.jar"
U=appdynamics
P=$(ps -fu $U|grep -F "$C"|awk '{print $2'})

cd $D

case "$1" in
start)
	if [ -z "$P" ] ; then 
		echo "Starting $N ..."
		su $U -c "nohup $C" &
	else 
		echo "$N already running (pid=$P)"
	fi
	;;
stop)
	if [ ! -z "$P" ] ; then 
		echo "Stopping $N (pid=$P) ..."
		kill $P
	else 
		echo "$N not running"
	fi
	;;
restart)
	$0 stop
	$1 start
esac
</pre></code>™1324499595€Executor/Thread Pool Tut€Nice and clean tutorial:

<a href="http://www.javacodegeeks.com/2011/12/using-threadpoolexecutor-to-parallelize.html>http://www.javacodegeeks.com/2011/12/using-threadpoolexecutor-to-parallelize.html</a>™1327258087€New Covestor Website€Until quite recently I was working at a financial start-up called Covestor. Predominantly I was working on their website, but the project was not complete when Ieft. It was good to see <a href="http://covestor.com/">covestor.com</a> up today.

The primary technologies were Postgres, Groovy and ColdFusion running on *NIX. It was a rapid education in various areas, including finance IT and working with a alien codebase, and having to find my way around with no real assistance.™1329560403€Tutorial: Integration Testing with Selenium - Part 1€<h2>Overview</h2>

I've been using this for sometime and I've come across a few things that appear to make life easier. I thought I'd share this as a tutorial, so I'll walk you through these parts:

<ol>
<li>Setting up a web project using Maven, configuring Selenium to run as an integration test on a C.I.
<li>Look into good ways to model the pages in your site using "page objects" and other ways to create points of protected-variation.
<li>Use JPA and Hibernate to perform CRUD operations on a database, and have Maven perform integration tests on them, without any of the costly and often undocumented set-up that this sometimes entails.
</ol>

This post assumes you're comfortable with Java, Spring, Maven 2 and, of course, HTML. You'll also want Firefox installed on you computer. This tutorial is intended to be otherwise technology agnostic.

<h2>Creating a Webapp</h2>

Firstly we'll need a webapp to test. Create an project using the maven-webapp-archetype and call it "selenuim-tutorial".

To run integration tests (ITs) we're going to use the Cargo plugin. This starts and stops containers such as Jetty and Tomcat. You can use Cargo to start your site using Jetty (its default) in one command without any changes:

<code>
mvn cargo:run
</code>

And check it in you browser at:

<a href="http://localhost:8080/selenuim-tutorial">http://localhost:8080/selenuim-tutorial</a>

You'll get a 404 without welcome file set-up, so add that to the web.xml file:

<code type="xml">
<welcome-file-list>
	<welcome-file>/index.jsp</welcome-file>
</welcome-file-list>
</code>

If you run cargo:run again you'll now see the "Hello World!" page that was created by Maven.

<h2>Configuring Cargo</h2>

We can set-up Cargo to start a Jetty container prior to running the tests, and then stop it afterwards. This will allow us to start our site, run the integration tests, and then stop it afterwards.

<code type="xml">
<plugin>
	<groupId>org.codehaus.cargo</groupId>
	<artifactId>cargo-maven2-plugin</artifactId>
	<version>1.2.0</version>
	<executions>
		<execution>
			<id>start</id>
			<phase>pre-integration-test</phase>
			<goals>
				<goal>start</goal>
			</goals>
		</execution>
		<execution>
			<id>stop</id>
			<phase>post-integration-test</phase>
			<goals>
				<goal>stop</goal>
			</goals>
		</execution>
	</executions>
</plugin>
</code>

You can test this work with:

<code>
mvn verify
</code>

One thing to note at this point is that Cargo runs on port 8080. If you've already got a process listening on that port you might see an error similar to this:

<code>
java.net.BindException: Address already in use
</code>

This might be because you're already running another container on this port. If you want to run this on a C.I. (which may itself run on port 8080), this is likely to be something you'll want to change. Add these lines to the plugin set-up:

<code type="xml">
<configuration>
	<type>standalone</type>
	<configuration>
		<properties>
			<cargo.servlet.port>10001</cargo.servlet.port>
		</properties>
	</configuration>
</configuration>
</code>

Now the app will be here:

<a href="http://localhost:10001/selenuim-tutorial/">http://localhost:10001/selenuim-tutorial/</a>

<h2>Setting-up Integration Test Phase</h2>

Next, we need to be able to run the integration tests. This requires the Maven failsafe plugin with appropriate goals added to your pom:

<code type="xml">
<plugin>
	<groupId>org.apache.maven.plugins</groupId>
	<artifactId>maven-failsafe-plugin</artifactId>
	<version>2.12</version>
	<executions>
		<execution>
			<id>default</id>
			<goals>
				<goal>integration-test</goal>
				<goal>verify</goal>
			</goals>
		</execution>
	</executions>
</plugin>
</code>

By default Failsafe expects tests to match the pattern "src/test/java/*/*IT.java".  Let's create a test to demonstrate this. Note that I haven't changed from Junit 3.8.1 yet. I'll explain to why later on.

Here's a basic, incomplete test:

<code type="java">
package tutorial;

import junit.framework.TestCase;

public class IndexPageIT extends TestCase {

	@Override
	protected void setUp() throws Exception {
		super.setUp();
	}

	@Override
	protected void tearDown() throws Exception {
		super.tearDown();
	}
	
	public void testWeSeeHelloWorld() {
		fail();
	}
}
</code>

Test that works:
	
<code>
mvn verify
</code>

You should see a single test failure. 

To test using Selenium you'll need to add a test-scoped dependency to pom.xml:

<code type="xml">
<dependency>
	<groupId>org.seleniumhq.selenium</groupId>
	<artifactId>selenium-firefox-driver</artifactId>
	<version>2.19.0</version>
	<scope>test</scope>
</dependency>
</code>

We can now make a couple of changes to our test:

<code type="java">
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;

…

	private URI siteBase;
	private WebDriver drv;

	@Override
	protected void setUp() throws Exception {
		super.setUp();

		siteBase = new URI("http://localhost:10001/selenuim-tutorial/");
		drv = new FirefoxDriver();
	}

...

	public void testWeSeeHelloWorld() {
		drv.get(siteBase.toString());
		assertTrue(drv.getPageSource().contains("Hello World"));
	}
</code>

We'll remove these hard coded values later on.

Run it again:

<code>
mvn verify
</code>

You shouldn't see any failures. What you will have is a lingering Firefox. It won't have closed. Run this test 100 times and you'll have 100 Firefoxs running. This will quickly become a problem. We can resolve this by adding this initialisation block to our test:

<code type="java">
	{
		Runtime.getRuntime().addShutdownHook(new Thread() {
			@Override
			public void run() {
				drv.close();
			}
		});
	}
</code>

Naturally, if we create another test, we'll soon be violating DRY principles. We'll come to that in the next part, as well as looking at what happens when we require a database connection, and some other ways to make sure that your tests are simple to write and easy to maintain.

<a href="/?q=content/tutorial-integration-testing-selenium-part-2">Continue to part 2</a>™1329607901€Tutorial: Integration Testing with Selenium - Part 2€<h2>Overview</h2>

In the <a href="/?q=content/tutorial-integration-testing-selenium-part-1">previous part of this tutorial</a> I covered the basics of setting up Maven with a small web project running integration tests. This post will cover <a href="http://en.wikipedia.org/wiki/GRASP_(object-oriented_design)#Protected_Variations">protected variation</a> using page objects and Spring context.

You'll will need to complete the <a href="/?q=content/tutorial-integration-testing-selenium-part-1">previous post</a> before starting this one.

<h2>Spring Context</h2>

In the previous example, the URI for the app, and the driver used were both hard coded. Assuming you're familiar with Spring context, this is a pretty straight forward to change these. Firstly we'll add the correct dependencies:

<code type="xml">
<dependency>
	<groupId>org.springframework</groupId>
	<artifactId>spring-context</artifactId>
	<version>3.1.1.RELEASE</version>
	<scope>test</scope>
</dependency>
</code>

This will allow us to use and application context to inject dependencies. But we'll also need the correct Junit runner to test this, which can be found in the spring-test package:

<code type="xml">
<dependency>
	<groupId>org.springframework</groupId>
	<artifactId>spring-test</artifactId>
	<version>3.1.1.RELEASE</version>
	<scope>test</scope>
</dependency>
</code>

We can now update our test to use this. Firstly we'll need to create src/test/resources/applicationContext-test.xml

<code type="xml">
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">

	<bean id="siteBase" class="java.net.URI">
		<constructor-arg value="http://localhost:10001/selenuim-tutorial/" />
	</bean>

	<bean id="drv" class="org.openqa.selenium.firefox.FirefoxDriver" destroy-method="quit"/>
</beans>
</code>

Spring will clear up the browser when it finishes, so we can remove the shutdown hook from AbstractIT. This is more robust than having the test case do this.

The spring-test doesn't work with JUnit 3, it needs at least JUnit 4.5. Lets update to version 4.10 in our pom.xml:

<code type="xml">
<dependency>
	<groupId>junit</groupId>
	<artifactId>junit</artifactId>
	<version>4.10</version>
	<scope>test</scope>
</dependency>
</code>

Finally, we need to update our test to work with both Spring and JUnit 4.x:

<code type="java">
package tutorial;

import static org.junit.Assert.assertTrue;

import java.net.URI;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.openqa.selenium.WebDriver;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "/applicationContext-test.xml" })
public class IndexPageIT {

	@Autowired
	private URI siteBase;

	@Autowired
	private WebDriver drv;

	@Test
	public void testWeSeeHelloWorld() {
...
</code>

These changes moved the configuration from hard coded values into XML config. We can now change the location we are testing, e.g. to a different host, and change the web driver we're using, which is left as an exercise for the user.

A quick note on browsers. I've found that after a browser update, tests often start failing. There appears to be two solutions to this:

<ul>
<li>Upgrade to the latest version of the web driver.</li>
<li>Don't upgrade the browser.</li>
</ul>

I suspect the first option is the best in most cases, for security reasons

<h2>Abstract IT</h2>

Currently, you'll need to duplicate all the code for IoC. A simple refactoring can sort this out. We'll create a super-class for all tests, and pull-up common features. This refactoring uses inheritance rather than composition, for reasons I'll cover later.

<code type="java">
package tutorial;

import java.net.URI;

import org.junit.runner.RunWith;
import org.openqa.selenium.WebDriver;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "/applicationContext-test.xml" })
public abstract class AbstractIT {

	@Autowired
	private URI siteBase;

	@Autowired
	private WebDriver drv;

	public URI getSiteBase() {
		return siteBase;
	}

	public WebDriver getDrv() {
		return drv;
	}
}
</code>

<code type="java">
package tutorial;

import static org.junit.Assert.assertTrue;

import org.junit.Test;

public class IndexPageIT extends AbstractIT {

	@Test
	public void testWeSeeHelloWorld() {
		getDrv().get(getSiteBase().toString());
		assertTrue(getDrv().getPageSource().contains("Hello World"));
	}
}
</code>

<h2>Page Objects</h2>

A "page object" is an object that encapsulates a single instance of a page, and provides a programatic API to that instance. A basic page might be:

<code type="java">
package tutorial;

import java.net.URI;

import org.openqa.selenium.WebDriver;

public class IndexPage {

	/**
	 * @param drv
	 *            A web driver.
	 * @param siteBase
	 *            The root URI of a the expected site.
	 * @return Whether or not the driver is at the index page of the site.
	 */
	public static boolean isAtIndexPage(WebDriver drv, URI siteBase) {
		return drv.getCurrentUrl().equals(siteBase);
	}

	private final WebDriver drv;
	private final URI siteBase;

	public IndexPage(WebDriver drv, URI siteBase) {
		if (!isAtIndexPage(drv, siteBase)) { throw new IllegalStateException(); }
		this.drv = drv;
		this.siteBase = siteBase;
	}
}
</code>

Note that I've provided a static method to return whether or we are at the index page, and I've commented it (debatably unnecessarily for such a self-documating method); page objects form an API and can be worthwhile documenting. You'll also see that we throw an exception if the URL is incorrect. It's worth considering what condition you use to identify pages. Anything that might change (e.g. the page title, which could change between languages) is probably a poor choice. Something unchanging and machine readable (e.g. the page's path) are good choices; if you want to change the path, then you'll need to change test.

Now lets create ourself a problem. I'd like to add this to index.jsp, but the HTML produced is un-parsable:

<code type="html">
<% throw new RuntimeException(); %>
</code>

Instead we'll create a new servlet, but first we'll need to add the servlet-api to the pom.xml:

<code type="xml">
<dependency>
	<groupId>javax.servlet</groupId>
	<artifactId>servlet-api</artifactId>
	<version>2.5</version>
	<scope>provided</scope>
</dependency>
</code>

<code type="java">
package tutorial;

import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class IndexServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		throw new RuntimeException();
	}
}
</code>

Add it to the web.xml and remove the now unnecessary welcome page:

<code type="xml">
<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >
<web-app>
	<servlet>
		<servlet-name>IndexServlet</servlet-name>
		<servlet-class>tutorial.IndexServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>IndexServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
</web-app>
</code>

Update IndexPageIT:

<code type="java">
	@Test
	public void testWeSeeHelloWorld() {
		getDrv().get(getSiteBase().toString());

		new IndexPage(getDrv(), getSiteBase());
	}
</code>

Run the test again. It passes. This might not be the behaviour you want. Selenium does not provide a way to check the HTTP status code via a WebDriver instance. Nor is the default error page sufficiently consistent between containers (compare this to what happens if you run on Tomcat for example); we cannot make assumptions about the error page's content to figure out if an error occurred.

Our index page currently does not have any machine readable features that allow us to tell it from an error page.

To tidy up, modify the servlet to display index.jsp:

<code type="java">
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		getServletContext().getRequestDispatcher("/index.jsp").forward(request, response);
	}
</code>

Currently index.jsp is a little too simple. Create a new page named create-order.jsp alongside index.jsp, and create a link on index.jsp to that page. We can create a new class for the order page, and a method that navigates us from the index page to the order page.

Add the following to index.jsp:

<code type="html">
<a href="create-order.jsp">Create an order</a>
</code>

create-order.jsp can be blank for now. We can also create a page object for it:

<code type="java">
package tutorial;

import java.net.URI;

import org.openqa.selenium.WebDriver;

public class CreateOrderPage {
	public static boolean isAtCreateOrderPage(WebDriver drv, URI siteBase) {
		return drv.getCurrentUrl().equals(siteBase.toString() + "create-order.jsp");
	}

	private final WebDriver drv;
	private final URI siteBase;

	public CreateOrderPage(WebDriver drv, URI siteBase) {
		if (!isAtCreateOrderPage(drv, siteBase)) { throw new IllegalStateException(); }
		this.drv = drv;
		this.siteBase = siteBase;
	}
}
</code>

Add the following dependency to pom.xml which will give us some useful annotations:

<code type="xml">
<dependency>
	<groupId>org.seleniumhq.selenium</groupId>
	<artifactId>selenium-support</artifactId>
	<version>2.19.0</version>
	<scope>test</scope>
</dependency>
</code>

We can flesh out IndexPage now:

<code type="java">
	@FindBy(css = "a[href='create-order.jsp']")
	private WebElement createOrderLink;

	public IndexPage(WebDriver drv, URI siteBase) {
		if (!isAtIndexPage(drv, siteBase)) { throw new IllegalStateException(); }
		PageFactory.initElements(drv, this);
		this.drv = drv;
		this.siteBase = siteBase;
	}
</code>

This call to PageFactory.initElements will populate fields annotated with @FindBy with the object matching the element on the web page. Note the use of a CSS selector, it's to target the link in way that is unlikely to change. Other methods include matching elements on the page using the link text (which might change for different languages).

We can now create a method on IndexPages which navigates to CreateOrderPages.

<code type="java">
	public CreateOrderPage createOrder() {
		createOrderLink.click();
		return new CreateOrderPage(drv, siteBase);
	}
</code>

Finally we can create a test for this link in IndexPageIT:

<code type="java">
	@Test
	public void testCreateOrder() {
		getDrv().get(getSiteBase().toString());

		new IndexPage(getDrv(), getSiteBase()).createOrder();

		assertTrue(CreateOrderPage.isAtCreateOrderPage(getDrv(), getSiteBase()));
	}
</code>

Execute mvn verify and you should find the new test passes. At this point we have two tests that do not clean up between them. They use the same WebDriver instance for both tests, the last page will still be open and any cookies that were set will remain so. There are pros and cons of creating a single instance of a WebDriver for several tests. The main pro being reducing time cost of opening and closing browsers, but a con being that the browser is effectively left dirty after each test, cookies set, pop-ups open. We can make sure it is clean before each test  with a suitable setUp method in AbstractIT:

<code type="java">
	@Before
	public void setUp() {
		getDrv().manage().deleteAllCookies();
		getDrv().get(siteBase.toString());
	}
</code>

There are alternative approaches to this, I'll leave it up to you to look into ways of creating a new WebDriver instance prior the each test.

The @FindBy annotation is especially useful when used on forms. Add a new form to create-order.jsp:

<code type="html">
	<form method="post" name="create-order">
		Item: <input name="item"/> <br/>
		Amount: <input name="amount"/><br/>
		<input type="submit"/>
	</form>
</code>

Add those WebElements to CreateOrderPage , and a method to submit the form:

<code type="java">
	@FindBy(css = "form[name='create-order'] input[name='item']")
	private WebElement itemInput;

	@FindBy(css = "form[name='create-order'] input[name='amount']")
	private WebElement amountInput;

	@FindBy(css = "form[name='create-order'] input[type='submit']")
	private WebElement submit;

	public CreateOrderPage(WebDriver drv, URI siteBase) {
		if (!isAtCreateOrderPage(drv, siteBase)) { throw new IllegalStateException(); }
		PageFactory.initElements(drv, this);
		this.drv = drv;
		this.siteBase = siteBase;
	}
	
	public CreateOrderPage submit(String item, String amount) {
		itemInput.sendKeys(item);
		amountInput.sendKeys(amount);
		submit.click();
		return new CreateOrderPage(drv, siteBase);
	}
</code>

Finally we can create a test for this:

<code type="java">
package tutorial;

import static org.junit.Assert.*;

import org.junit.Test;

public class CreateOrderPageIT extends AbstractIT {

	@Test
	public void testSubmit() {
		new IndexPage(getDrv(), getSiteBase()).createOrder().submit("foo", "1.0");
	}
}
</code>

<h2>Conclusion</h2>

One thing you might note is that the submit method doesn't require the amount to be a number as you might expect. You could create a test to see that submitting a string instead of a number. Integration tests can be time consuming to write and vulnerable to breaking as a result of changes to things such as the ID of an element, or name of an input. As a result the greatest benefit to be gained from creating them is initially create them just on business critical paths within your site, for example, product ordering, customer registration processes and payments.

In the next part of this tutorial, we'll looking at backing the tests with some data, and the challenges this engenders.

This tutorial is <a href="https://github.com/alexec/tutorial-selenium">on Github</a>.

You might be interesting in using <a href="?q=content/tomcat-context-junit-rule">my JUnit @Rule for Tomcat</a>.™1330169107€BMI Tool€	<form onSubmit="return false;"  class="form-inline">
		<fieldset>
			<legend>Weight</legend>
	<label>Stone</label><input type="text" name="stone" value="0"
				onKeyUp="ui.updateKilos.call(this);" /> <label>Pounds</label><input
				value="0" type="text" name="pounds"
				onKeyUp="ui.updateKilos.call(this);" /><label>Kilos</label><input
				type="text" name="kilos" value="0.0"
				onKeyUp="ui.updateStoneAndPounds.call(this);" />
		</fieldset>
		<fieldset>
			<legend>Height</legend>
			<label>Feet</label><input type="text" name="feet" value="0"
				onKeyUp="ui.updateMetres.call(this);" /> <label>Inches</label><input
				value="0" type="text" name="inches"
				onKeyUp="ui.updateMetres.call(this);" /><label>Metres</label><input
				type="text" name="metres" value="0.0"
				onKeyUp="ui.updateFeetAndInches.call(this);" />
		</fieldset>
		<fieldset>
			<legend>BMI</legend>
			<label>Value</label> <input type="text" name="bmi"
				disabled="disabled" /> <label>Category</label> <input type="text"
				name="category" disabled="disabled" /> <label>Variation</label> <select
				name="variation" onChange="ui.updateCategory.call(this);"><option
					value="standard">Standard</option>
				<option value="japanese">Japanese</option>
			</select>
		</fieldset>
	</form>
	<a href="http://en.wikipedia.org/wiki/Body_mass_index">http://en.wikipedia.org/wiki/Body_mass_index</a>
	<script type="text/javascript">
		units = {};
        units.mass = {};
        units.mass.poundsPerStone = 14;
        units.mass.poundsPerKilo = 2.20462262;
        units.length = {};
        units.length.inchesPerFoot = 12;
        units.length.inchesPerMetre = 39.3700787;

        bmi = function(mass /* in kilos */, length /*in meters*/) {
	        return mass / Math.pow(length, 2);
        };

        health = {};
        health.categoryFor = function(bmi, variation /* standard, japanese */) {
	        switch (variation) {
	        case "standard":
		        var maxNormal = 25;
		        var maxOverweight = 30;
		        break;
	        case "japanese":
		        var maxNormal = 23;
		        var maxOverweight = 25;
		        break;
	        default:
		        throw new Error("unknown system");
	        }
	        if (bmi < 16) {
		        return "Severely underweight";
	        }
	        if (bmi < 18.5) {
		        return "Underweight";
	        }
	        if (bmi < maxNormal) {
		        return "Normal";
	        }
	        if (bmi < maxOverweight) {
		        return "Overweight";
	        }
	        if (bmi < 35) {
		        return "Obese I";
	        }
	        if (bmi < 40) {
		        return "Obese II";
	        }
	        return "Obese III";
        };

        // all UI should be called using ui.nameOfFunction.call(this);
        ui = {};
        ui.updateStoneAndPounds = function() {
	        var pounds = parseFloat(this.value) * units.mass.poundsPerKilo;
	        this.form.elements.stone.value = (pounds / units.mass.poundsPerStone)
	                .toFixed(0);
	        this.form.elements.pounds.value = (pounds % units.mass.poundsPerStone)
	                .toFixed(0);
	        ui.updateBmi.call(this);
        };
        ui.updateKilos = function() {
	        var pounds = parseFloat(this.form.elements.stone.value)
	                * units.mass.poundsPerStone
	                + parseFloat(this.form.elements.pounds.value);
	        this.form.elements.kilos.value = (pounds / units.mass.poundsPerKilo)
	                .toFixed(2);
	        ui.updateBmi.call(this);
        };
        ui.updateFeetAndInches = function() {
	        var inches = parseFloat(this.value) * units.length.inchesPerMetre;
	        this.form.elements.feet.value = (inches / units.length.inchesPerFoot)
	                .toFixed(0);
	        this.form.elements.inches.value = (inches % units.length.inchesPerFoot)
	                .toFixed(0);
	        ui.updateBmi.call(this);
        };
        ui.updateMetres = function() {
	        var inches = parseFloat(this.form.elements.feet.value)
	                * units.length.inchesPerFoot
	                + parseFloat(this.form.elements.inches.value);
	        this.form.elements.metres.value = (inches / units.length.inchesPerMetre)
	                .toFixed(2);
	        ui.updateBmi.call(this);
        };
        ui.updateBmi = function() {
	        this.form.elements.bmi.value = bmi(
	                parseFloat(this.form.elements.kilos.value),
	                parseFloat(this.form.elements.metres.value)).toFixed(1);
	        ui.updateCategory.call(this);
        };
        ui.updateCategory = function() {
	        this.form.elements.category.value = health.categoryFor(
	                parseFloat(this.form.elements.bmi.value),
	                this.form.elements.variation.value);
        };
	</script>™1330813916€LMAX Disruptor Pattern Screencast€An interesting, hour long presentation on this pattern:

http://www.dzone.com/links/r/lmax_disruptor_100k_tps_at_less_than_1ms_latency.html™1330867289€Site Updates€I've spent a bit of time making the site more friendly for visitors. I've added a site-wide contact form so you can email me. I've updated the registration so that you can now comment on pages, but you'll need to confirm your email first.™1331160348€yUML - UML Diagramming Tool€<a href="http://yuml.me/">yUML</a> looks interesting. It has a nice terse syntax that make creating diagrams really easy and quick to create. It's free and looks OK.

<img src="http://yuml.me/diagram/scruffy/class/%5BBlog%5D%3C%3E0-.-*%5BPost%5D,%20%5BPost%5D-.-%5E%5B%3C%3CCommentable%3E%3E%5D,%20%5BPost%5D0-%3E*%5BComments%5D"/>™1332786152€Tutorial: Hibernate, JPA - Part 1€<h1>Overview</h1>

This is the first part of tutorial about using Hibernate and JPA. This part is an introduction to to JPA and Hibernate. The second part will look at putting together a Spring MVC application using Spring ORM to reduce the amount of code necessary to create a CRUD application.

To complete this you'll want to be familiar with Maven, JUnit, SQL and relational databases.

<h2>Dependencies</h2>

Firstly we'll need a couple of basic dependencies. Essentially there are three layers:

<ol>
<li>The lowest layer is the JDBC drivers used by Hibernate to connect to the database. I'm going to use Derby, a simple embedded database. There's no server to install or configure so it's easier to set-up that even MySQL or PostgreSQL; it's not suitable for production.</li>
<li>The middle layer is the Hibernate libraries. I'm going to use version 3.5.6. This works with Java 1.5, 4.x does not.</li>
<li>The JPA libraries.</li>
</ol>

Additionally we'll want JUnit for creating tests and Tomcat so we can using it's JNDI naming for tests. JNDI is a preferable system to including the server details in a properties file for reasons we'll come to.

<code type="xml">
<dependencies>
        <dependency>
            <groupId>org.apache.derby</groupId>
            <artifactId>derby</artifactId>
            <version>10.4.1.3</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-entitymanager</artifactId>
            <version>3.6.9.Final</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate.javax.persistence</groupId>
            <artifactId>hibernate-jpa-2.0-api</artifactId>
            <version>1.0.0.Final</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.10</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.tomcat</groupId>
            <artifactId>catalina</artifactId>
            <version>6.0.18</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</code>

<h2>Configuration</h2>

The key config file for JPA is persistence.xml. This lives in the META-INF directory. It details what the persistence driver to use and what JNDI data source to connect to. Additional properties can also be specified, in this case we'll include some Hibernate properties. 

I've added some comments on the additional properties so you know what they are for. You can configure the data source directly, but using JNDI means we can easily deploy the code in a container, as a standalone or to run unit tests, with minimal code changes.

<code type="xml">
<?xml version="1.0" encoding="UTF-8"?>
<persistence xmlns="http://java.sun.com/xml/ns/persistence"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd"
	version="1.0">

	<persistence-unit name="tutorialPU" transaction-type="RESOURCE_LOCAL">
		<provider>org.hibernate.ejb.HibernatePersistence</provider>
		<!-- the JNDI data source -->
		<non-jta-data-source>java:comp/env/jdbc/tutorialDS</non-jta-data-source>
		<properties>
			<!-- if this is true, hibernate will print (to stdout) the SQL it executes, 
				so you can check it to ensure it's not doing anything crazy -->
			<property name="hibernate.show_sql" value="true" />
			<property name="hibernate.format_sql" value="true" />
			<!-- since most database servers have slightly different versions of the 
				SQL, Hibernate needs you to choose a dialect so it knows the subtleties of 
				talking to that server -->
			<property name="hibernate.dialect" value="org.hibernate.dialect.DerbyDialect" />
			<!-- this tell Hibernate to update the DDL when it starts, very useful 
				for development, dangerous in production -->
			<property name="hibernate.hbm2ddl.auto" value="update" />
		</properties>
	</persistence-unit>
</persistence>
</code>

<h2>Entities</h2>

JPA talks in terms of entities rather than database records. An entity is an instance of a class maps to a single record in a table (classes map to tables). The entities fields (which should use the JavaBean naming convention) are mapped to columns.  

Annotations can be used to add extra information to the class. They mark the class as being an entity, and allow you to specify meta information about the table and columns, such as names, sizes, and constraints.

In our case we're going to start with the simplest entity possible.

<code type="java">
package tutorial;

import javax.persistence.*;
import java.util.HashSet;
import java.util.Set;

@Entity
@Table(name = "usr") // @Table is optional, but "user" is a keyword in many SQL variants 
public class User {
    @Id // @Id indicates that this it a unique primary key
    @GeneratedValue // @GeneratedValue indicates that value is automatically generated by the server
    private Long id;

    @Column(length = 32, unique = true)
    // the optional @Column allows us makes sure that the name is limited to a suitable size and is unique
    private String name;

    // note that no setter for ID is provided, Hibernate will generate the ID for us

    public long getId() {
        return id;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }
}
</code>

JPA can use the meta information to create the DDL when it starts up. This is helpful for development as it allows you to quickly get up and running without delving into the SQL needed to create tables. Want to add a column? Just add the column, compile and run. Unfortunately, what you gain in convenience is also an increase in risk (e.g. what does the database server do when a table has millions of records and you add a new column?) and loss of control.

There's a compromise, once the entities have been created by Hibernate, you can export the DDL and change Hibernate's config to stop it updating the DDL. 

<h2>Test Case</h2>

There are only two pieces, first we'll create an abstract test case as a root for all our tests. This will register a data source with JNDI, and we will extend it with other tests so that they access to the database.

<code type="java">
package tutorial;

import org.apache.derby.jdbc.EmbeddedDataSource;
import org.apache.naming.java.javaURLContextFactory;
import org.junit.AfterClass;
import org.junit.BeforeClass;

import javax.naming.Context;
import javax.naming.InitialContext;

public abstract class AbstractTest {

	@BeforeClass
	public static void setUpClass() throws Exception {
		System.setProperty(Context.INITIAL_CONTEXT_FACTORY, javaURLContextFactory.class.getName());
		System.setProperty(Context.URL_PKG_PREFIXES, "org.apache.naming");
		InitialContext ic = new InitialContext();

		ic.createSubcontext("java:");
		ic.createSubcontext("java:comp");
		ic.createSubcontext("java:comp/env");
		ic.createSubcontext("java:comp/env/jdbc");

		EmbeddedDataSource ds = new EmbeddedDataSource();
		ds.setDatabaseName("tutorialDB");
		// tell Derby to create the database if it does not already exist
		ds.setCreateDatabase("create");

		ic.bind("java:comp/env/jdbc/tutorialDS", ds);
	}

	@AfterClass
	public static void tearDownClass() throws Exception {

		InitialContext ic = new InitialContext();

		ic.unbind("java:comp/env/jdbc/tutorialDS");
	}
}
</code>

The final piece is the test case. The entity manger provide access to the data. The persist operation (which will result in a single insert in this case) must be performed in a transaction. In fact Hibernate will not do any work until the commit. You can see this by adding a Thread.sleep immediately prior to the commit. 

<code type="java">
@Test
    public void testNewUser() {

        EntityManager entityManager = Persistence.createEntityManagerFactory("tutorialPU").createEntityManager();

        entityManager.getTransaction().begin();

        User user = new User();

        user.setName(Long.toString(new Date().getTime()));

        entityManager.persist(user);

        entityManager.getTransaction().commit();

        // see that the ID of the user was set by Hibernate
        System.out.println("user=" + user + ", user.id=" + user.getId());

        User foundUser = entityManager.find(User.class, user.getId());

        // note that foundUser is the same instance as user and is a concrete class (not a proxy)
        System.out.println("foundUser=" + foundUser);

        assertEquals(user.getName(), foundUser.getName());

        entityManager.close();
    }
</code>

<h2>Exception Handling</h2>

The need for a begin and commit is verbose. Additionally, the last example is incomplete, as it misses any rollback if an exception occurs. 

Exception handling is boiler plate code. Like it's JDBC equivalent, it's not pretty. Here's a example:

<code type="java">
 @Test(expected = Exception.class)
    public void testNewUserWithTxn() throws Exception {

        EntityManager entityManager = Persistence.createEntityManagerFactory("tutorialPU").createEntityManager();

        entityManager.getTransaction().begin();
        try {
            User user = new User();

            user.setName(Long.toString(new Date().getTime()));

            entityManager.persist(user);

            if (true) {
                throw new Exception();
            }

            entityManager.getTransaction().commit();
        } catch (Exception e) {
            entityManager.getTransaction().rollback();
            throw e;
        }

        entityManager.close();
    }
</code>

I'll leave the exception management out for the moment as there are better ways to do it. Later we'll look at how JSR-330's @Inject and Spring Data's @Transactional can reduce the boiler plate.

<h2>Entity Relations</h2>

Since we're using relational databases, we'll almost certainly want to create a relation between entities. We'll create a role entity and have a many to many relationship between user and role. To create the role entity, just copy the User entity, name it Role and remove the @Table line. We don't need to create a UserRole entity. But we will want to add and remove roles from the user.

Add the following field and method to the user table:

<code type="java">
    @ManyToMany
    private Set<Role> roles = new HashSet<Role>();

    public boolean addRole(Role role) {
        return roles.add(role);
    }

    public Set<Role> getRoles() {
        return roles;
    }
</code>

The @ManyToMany annotation tells JPA that it's a many-to-many relation. We can test this with a new test case. This test creates a user and role in one transaction and then updates the user in the second using merge. Merges are used to update an entity in the database.

<code type="java">
  @Test
    public void testNewUserAndAddRole() {

        EntityManager entityManager = Persistence.createEntityManagerFactory("tutorialPU").createEntityManager();

        entityManager.getTransaction().begin();

        User user = new User();

        user.setName(Long.toString(new Date().getTime()));

        Role role = new Role();

        role.setName(Long.toString(new Date().getTime()));

        entityManager.persist(user);
        entityManager.persist(role);

        entityManager.getTransaction().commit();


        assertEquals(0, user.getRoles().size());


        entityManager.getTransaction().begin();

        user.addRole(role);

        entityManager.merge(user);

        entityManager.getTransaction().commit();


        assertEquals(1, user.getRoles().size());


        entityManager.close();
    }
</code>

<h2>Queries</h2>

JPA allows you to use a query language with a strong similarity to SQL called JPQL. Queries can be written directly, but named queries are easier to control, to maintain and exhibit better performance as Hibernate can prepare the statement. They are specified using the @NamedQuery annotation. Add this line to the User class after the @Table annotation:

<code type="java">
@NamedQuery(name="User.findByName", query = "select u from User u where u.name = :name")
</code>

You can test this as follows:

<code type="java">
	@Test
	public void testFindUser() throws Exception {

		EntityManager entityManager = Persistence.createEntityManagerFactory("tutorialPU").createEntityManager();

		entityManager.getTransaction().begin();

		User user = new User();

		String name = Long.toString(new Date().getTime());

		user.setName(name);

		Role role = new Role();

		role.setName(name);

		user.addRole(role);

		entityManager.persist(role);
		entityManager.persist(user);

		entityManager.getTransaction().commit();

		entityManager.close();

		entityManager = Persistence.createEntityManagerFactory("tutorialPU").createEntityManager();

		User foundUser = entityManager.createNamedQuery("User.findByName", User.class).setParameter("name", name)
				.getSingleResult();

		System.out.println(foundUser);

		assertEquals(name, foundUser.getName());

		assertEquals(1, foundUser.getRoles().size());

		System.out.println(foundUser.getRoles().getClass());

		entityManager.close();
	}
</code>

In this example I've closed and reopened the entity manager. This forces Hibernate to request the user from the database. Notice anything interesting about the output? The SQL for getting the roles appears after the toString of the found user. Hibernate creates a proxy object for the roles (in this case a org.hibernate.collection.PersistentSet), and only populates it when you first access the object. This can result in counter-intuitive behaviour and has its own set of pitfalls.

Try this variation of the above test where we close the entity manager before we first query the roles:

<code type="java">
	@Test(expected = LazyInitializationException.class)
	public void testFindUser1() throws Exception {

		EntityManager entityManager = Persistence.createEntityManagerFactory("tutorialPU").createEntityManager();

		entityManager.getTransaction().begin();

		User user = new User();

		String name = Long.toString(new Date().getTime());

		user.setName(name);

		Role role = new Role();

		role.setName(name);

		user.addRole(role);

		entityManager.persist(role);
		entityManager.persist(user);

		entityManager.getTransaction().commit();

		entityManager.close();

		entityManager = Persistence.createEntityManagerFactory("tutorialPU").createEntityManager();

		User foundUser = entityManager.createNamedQuery("User.findByName", User.class).setParameter("name", name)
				.getSingleResult();

		entityManager.close();

		assertEquals(1, foundUser.getRoles().size());
	}
</code>

The LazyInitializationException will be thrown on the getRoles() call. This is not a bug. Once the entity manager is closed, any entity can become unusable.

<h2>End</h2>

This is the basics to get up and running with Hibernate JPA. In the next part of this tutorial, I'll discuss validation, and look at some other details in more depth.

This tutorial is <A href="https://github.com/alexec/tutorial-hibernate-jpa/tree/part-1">on Github</a>.

You might want to do <a href="/?q=content/tutorial-hibernate-jpa-spring-mvc-part-2">Part 2</a>.™1333731731€Stretch for 60s€<p>Have a nice long stretch...</p>
	<form style="display:none;">
		<input id="y" value="60" /> seconds
	</form>
	<div id="x">...</div>
	<script type="text/javascript">
		var x = new Date().getTime(), s1 = null;
        var b = 1;
        function f() {
	        var n = (new Date()).getTime();
	        var d = parseInt((n - x) / 1000);
	        var s = n / 1000;
	        var y = parseInt(document.getElementById("y").value);
	        var z = (d + 1) % y;
	        document.getElementById("x").innerHTML = y - z;
	        if (z == 0 && s != s1) {
		        console.log("z=" + z);
		        var a = document.getElementById("sayNext");
		        b = 1; //(b - 1) % 6 + 1;
		        a.play();
		        s1 = s;
		        b++;
	        }
	        setTimeout("f();", 1000);
        }
        f();
	</script>
	<audio id="sayNext" preload="auto" autobuffer>
<source src="data:audio/wav;base64,UklGRl8EAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YTsEAAB/gYB/gH+Dg4aGhoR8c2xlZGx2hJKfp6WfkHtpW1JTXGx/lKOurqaWhG5cUE5VZXuQpbCzrJyJcV1QTFFgc42fsLSxoo53YFBKTlpwhpyttbOolHtlU0hJVWmAl6y3t6yZgmlVSEZRYnqVq7i7saGHb1dIRE5fdo6ms7q0pY51XEtDSVZuiqG2vLqpk3peS0NFU2mBnrK9u6+bgGVORUNQYn6arby9sp+Ga1JGQkxddpKpt7y1ootvV0ZCSVlzjaW5u7inkHZbS0RHVW6HorW9uqyVeV9LQURRZoKcsr68sJuAZk9CQk5ifJivu7yyoIZqVEhDTVt1jqe4urekjXRbS0RLWXGJorG7tqiUemFOREZUaIKbsLu6rpmBZVJGRlFkfZetuLqxn4dsV0ZDTFx1j6e2u7SkjXJdS0ZLWnGLorS6taeQd19NRUlWboWdrbW0ppN+ZlRNTVlpgJepsrOpmYFtXFRRVWJyip+xtKeSdWBVXXGHmJ2RfGRZXnaSqa+oi21SS1x9nrW0nnpZSFBrkKy1qYtoUElaeZq0tqKBX0pMY4ent6yRblJKVnaWsLemhWRLR1t+o7e1nHdURVJvlLC4qYplSkZYeJy1uaiFX0ZHYYapurCWcVJFUnGTsrisi2hMRlZ5nbe2oHtaSE9rjKy1rJFtUklUcpWwt6aFYk5OYYSkta6XdlVIUGuOrLmuk3BRRFFvlrO4p4diS0legKO2tZp2V0dOaI+vubGTb05EUHCYtbqphWBGSGCKrbqtjWRJR1t/ori3on9cRkdfgKa7uKJ9WURHYIiru7KVb1BFUW+UsrqrjWlQR1Z2lrC1o4NiTlJoiaKuqpNzW09Yb42lrKWPdFtVXnSQo6iahG1bXGmCmKObjn1kXW55f5mii3uGdFh0lXp2ppRffJ1vYJaPYn+edWeWjmOBmnRslIxmfJp4Z5KQZX2cdWWUkmR3oHhjk5JieKVyYKGMVYyfZG2lhVeMpGRkqIxQhqtmYqaJVo6gYG2se1OaoFVysndRmKVaaa2DUJOlW2ywfVGYoldxsHlTmKVYbK5+UpehWnGud1eZnllxrndUmqBWca57U5ehWnCteFeamVt4p3NfmpRZfapxWp6aWXKrfVeTn19ypXtdl5haeqtvXKCVVnqqdVmZm1xxqnxalpldd6R4YZKWZXWiemCRmmZvnoRjh5hrb5yHXYajZGWph1SLqGNiqItSh6poYKWMVYinZWKmjlOHqWdgpZFUgKpuXKKWU32sbVygllN7rHNYnJtYdKt7V5adXnGoeVqdk1V9r3NUnZ1Ud652VpmgWXOtdlabnFl1q3ZamZpadqd5W5WbYHWefGSOkWp5lHxxiIpzeo5/c4aKc3uOf3GHinN8j3tyjoZtgpJ0cpKIZIOZcm2VhmaFlXFykoRthYx5eYSBfX+BgH9+f4B/f39/gIA="/>
	</audio>
™1335342047€Windows for *NIX Users€I've moved to a Windows environment recently at work, and I've spent a lot of time adjusting and trying to get productivity up to previous levels. I've found these invaluable:

<ul>
<li><b><a href="http://www.cygwin.com/">Cywin</a></b> provides a bash shell for Windows. All the commands you'd expect are there Microsoft provide some POSIX tools, but I've to tested them.</li>
<li><b><a href="http://en.wikipedia.org/wiki/Process_Explorer">Process Explorer</a>/<b> is like Task Manager,  but with dozens of helpful additional features, e.g. for when you just have to SIGKILL a process.</li>
<li><b>notepad.exe</b> is the Window's vi.</li>
<li><b><a href="http://windows.microsoft.com/en-GB/windows7/products/features/snipping-tool">Snipping Tool</a></b> for taking screen shots.</li>
<ul>
™1335699770€Tutorial: JUnit @Rule€<h2>Overview</h2>

<p>Recent versions of JUnit have added support for a concept called rules, a system similar to custom runners, but without some of the restrictions. This tutorial looks at creating custom rules, how this can simplify integration with Spring and Mockito, and how you can create simpler and more powerful tests using them.</p>

<h2>Rules as Runners</h2>

<p>You might be familiar with SpringJUnit4ClassRunner or MockitoJUnitRunner, both of which can be applied to a test class to inject dependencies - either from the application context into fields annotated with @Autowired the case of Spring, or mocks annotated with the @Mock annotation in the case of Mockito, for example:</p>

<code type="java">
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = "classpath:testContext.xml")
public class FooTest {

@Autowired
private String foo;
…
</code>

<p>Or</p>

<code type="java">
@RunWith(MockitoJUnitRunner.class)
public class BarTest {
	
	@Mock
	private List<String> bar;
</code>

<p>What if you wanted both mocks and dependencies and injected? In recent JUnit versions (&gt;= 4.7), @RunsWith can be replaced with @Rule. @Rule can be used by a class in indicate that it requires work done before and after a test's execution. This can allow you to test standard parts of your application, while at the same time, creating the context that you need to run you tests in. For example, you could verify some test invariants, create an application context or set-up a JPA session/JDBC connection for integration tests.</p>

Lets start with a basic set of boiler-plate dependencies in our pom.xml:

<code type="xml">
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>2.5.6</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>2.5.6</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>1.9.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.10</version>
			<scope>test</scope>
		</dependency>
</code>

<p>Next we'll create a rule for injecting @Autowired dependencies. This rule wraps each execution of a test within the class by creating a context, injecting the beans into the classes fields, and managing the life-cyle of that context.</p>

<code type="java">
public class SpringContextRule implements TestRule {

    /** A list of class-path contexts. */
    private final String[] locations;
    
    /** The target test. */
    private final Object target;

    public SpringContextRule(String[] locations, Object target) {
        this.locations = locations;
        this.target = target;
    }

    public Statement apply(final Statement base, Description description) {
        return new Statement() {
            @Override
            public void evaluate() throws Throwable {
                ConfigurableApplicationContext context = new ClassPathXmlApplicationContext(
                        locations);
                AutowireCapableBeanFactory beanFactory = context
                        .getAutowireCapableBeanFactory();

                /* As this is an example of @Rule, this is a rough hand-rolled injector, 
                 * not suitable for production.
                 * More capable ones, that support @Inject, @Qualifier etc. probably exist. */
                for (Field f : target.getClass().getFields()) {
                    if (f.isAnnotationPresent(Autowired.class)) {
                        f.set(target, context.getBean(f.getName(), f.getType()));
                    }
                }
                context.start();
                try {
                    base.evaluate();
                } finally {
                    context.close();
                }
            }
        };
    }
}
</code>

<p>We can test this works using a small context and test, that verifies that auto-wired fields are set as expected.</p>

<code type="xml">
<?xml version="1.0" encoding="UTF-8"?>
<!-- testContext.xml -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">

	<bean id="bar" class="java.lang.String">
		<constructor-arg value="bar"/>
	</bean>

</beans>
</code>

<code type="java">
public class FooTest {

	@Rule
	public TestRule contextRule = new SpringContextRule(
			new String[] { "testContext.xml" }, this);

	@Autowired
	public String bar;

	@Test
	public void testBaz() throws Exception {
		assertEquals("bar", bar);
	}
}
</code>

<p>Next we can extend this, by adding a mocking rule. This will simply populate the mocks before each test.</p>

<code type="java">
public class MockRule implements TestRule {

    private final Object target;

    public MockRule(Object target) {
        this.target = target;
    }

    public Statement apply(final Statement base, Description description) {
        return new Statement() {
            @Override
            public void evaluate() throws Throwable {
                MockitoAnnotations.initMocks(target);
                base.evaluate();
            }
        };
    }
}
</code>

<p>Finally, lets put it all together with a final test.</p>

<code type="java">
public class FooTest {

    @Rule
    public TestRule contextRule = new SpringContextRule(new String[]{"testContext.xml"}, this);

    @Rule
    public TestRule mockRule = new MockRule(this);

    @Autowired
    public String bar;

    @Mock
    public List baz;

    @Test
    public void testBar() throws Exception {
        assertEquals("bar", bar);
    }

    @Test
    public void testBaz() throws Exception {
        when(baz.size()).thenReturn(2);
        assertEquals(2, baz.size());
    }
}
</code>

<p>This test shows that you can mix two rules together, something that you cannot do with @RunWith. You could create you own custom runner, but that runner would have very poor <a href="http://en.wikipedia.org/wiki/Cohesion_(computer_science)">cohesion</a>.</p>

<h2>Rules as Invariants</h2>

<p>With @Rule, not only can you mix different rules, you can also enforce invariants. To do this, we'll create an marker annotation for fields that should not change, and a new rule to check the invariants.</p>

<code type="java">
@Target(ElementType.FIELD)
@Retention(RetentionPolicy.RUNTIME)
public @interface Invariant {
}
</code>

<p>The rule cheaply stores each field's hash-codes and then compares them before and after the test, throwing an error if the hash-code has changed.</p>

<code type="java">
public class InvariantRule implements TestRule {

    private final Object target;

    /**
     * It should be noted that, while cheap and safe, an object can 
     * change, but the hash code not. Bugs that result might be a tricky to diagnose.
     */
    private final Map<Field, Integer> fieldToHashCode = new HashMap<Field, Integer>();

    public InvariantRule(Object target) {
        this.target = target;
    }

    public Statement apply(final Statement base, Description description) {
        return new Statement() {
            @Override
            public void evaluate() throws Throwable {
                fieldToHashCode.clear();

                for (Field f : target.getClass().getFields()) {
                    if (f.isAnnotationPresent(Invariant.class)) {
                        fieldToHashCode.put(f, f.get(target).hashCode());
                    }
                }

                base.evaluate();

                for (Map.Entry<Field, Integer> e : fieldToHashCode.entrySet()) {
                    if (e.getKey().get(target).hashCode() != e.getValue()) {
                        throw new AssertionFailedError(e.getKey().getName() + " changed");
                    }
                }
            }
        };
    }
}
</code>

<p>Finally, a test.</p>

<code type="java">
public class BazTest {

    @Rule
    public TestRule invariantRule = RuleChain.outerRule(
            new TestRule() {
                @Override
                public Statement apply(final Statement base, Description description) {
                    return new Statement() {
                        @Override
                        public void evaluate() throws Throwable {
                            qux = 2;
                            base.evaluate();
                        }
                    };
                }
            }).around(new InvariantRule(this));

    @Invariant
    public int qux;

    @Test
    public void testListUnchanged() throws Exception {
        // nop
    }

    @Test // this will cause on exception
    public void testListChangedImpliesError() throws Exception {
        qux = 3;
    }
}
</code>

<h2>Conclusion</h2>

<p>You may have noted that @Before and @After have not featured in these tests. Rules are executed around @Before/@After and therefore it's not possible to set-up invariants in @Before. Instead we use a rule chain to create what is  effectively a @Before using an anonymous inner class. @Rule provides a more powerful and flexible way of reducing boilerplate code in your test.</p>

<p>This code is on Github, split between <a href="https://github.com/alexec/tutorial-junit-rules">the tests</a> and <a href="https://github.com/alexec/test-support">the rules</a>.</p>™1337164360€Tutorial: Hibernate, JPA & Spring MVC - Part 2€<h2>Overview</h2>

<p>This tutorial will show you how to take a basic Hibernate/JPA app, convert it into a Spring MVC web project to be able to view the database in a web browser, and finally use Spring's @Transactional annotation to reduce boiler plate code.</p>

<p>This tutorial assumes you're familiar with Java and Maven, and that you've completed the <a href="http://www.alexecollins.com/?q=content/tutorial-hibernate-jpa-part-1">first part of this tutorial</a>. You'll also need to have downloaded and installed Tomcat.</p>

<p>You may wish to check out the code freshly from <a href="https://github.com/alexec/tutorial-hibernate-jpa/tree/part-1">Github</a>.</p>

<h2>Container Managed Data-Source</h2>

<p>There a number of key files that we'll need to amend or create to convert the code from part 1 into a web project. The first thing we'll need to do (assuming you've got Tomcat installed and have set CATALINA_HOME in your computer's environment) is to move the JDBC configuration to Tomcat's so that the data-source's are managed by Tomcat, rather than programatically, and can be accessed using JNDI.</p>

<p>To do this, add the following lines inside the GlobalNamingResources element of $CATALINA_HOME/conf/server.xml:</p>

<code type="xml">
<Resource auth="Container" 
    driverClassName="org.apache.derby.jdbc.EmbeddedDriver" 
    maxActive="8" maxIdle="4" 
    name="jdbc/tutorialDS" type="javax.sql.DataSource" 
    url="jdbc:derby:tutorialDB;create=true" 
    username="" password="" />
</code>

<p>A jar containing org.apache.derby.jdbc.EmbeddedDriver needs to be available to Tomcat. An quick way to get the jar is from your Maven local repository, e.g. ~/.m2/repository/org/apache/derby/derby/10.4.1.3/derby-10.4.1.3.jar. Copy that file into $CATALINA_HOME/lib and restart Tomcat to make sure there was no errors.</p>

<p>These changes will create a data source that deployed applications can access. In Tomcat 7 you can view the managed resources at <a href="http://localhost:8080/manager/text/resources">http://localhost:8080/manager/text/resources</a>; you should see something like:</p>

<code>
OK - Listed global resources of all types
jdbc/tutorialDS:org.apache.tomcat.dbcp.dbcp.BasicDataSource
UserDatabase:org.apache.catalina.users.MemoryUserDatabase
</code>

<h2>Converting Into a Web Project</h2>

<p>Using the some project from part 1 we need to make the following changes:</p>

<p>We need to change the project to produce a web archive, so in the pom.xml add the following:</p>

<code type="xml">
<packaging>war</packaging>
</code>

<p>You'll want to add (as a convenience) a line inside the build section that creates a .war without the project version:</p>

<code type="xml">
<finalName>${project.artifactId}</finalName>
</code>

<p>We also need the servlet API libraries:</p>

<code type="xml">
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
            <scope>provided</scope>
        </dependency>
</code>

<p>Note: the scope for this is "provided", as Tomcat already has a built in servlet library.</p>

<p>So that the data-source is available to the app, create src/main/webapp/META-INF/context.xml with the following lines:</p>

<code type="xml">
<Context>
    <ResourceLink global="jdbc/tutorialDS" name="jdbc/tutorialDS" type="javax.sql.DataSource"/>
</Context>
</code>

<p>This makes the data-source managed by Tomcat available to our app. We also need a stub for src/main/webapp/WEB-INF/web.xml:</p>

<code type="xml">
<web-app
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="http://java.sun.com/xml/ns/javaee"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
    version="2.5">
</web-app>
</code>

<p>Compile and deploy the app to Tomcat. You won't be able to see anything at this point, as there are no servlets or pages.</p>

<p>It's possible to get Maven to build and deploy to Maven for you, or you can run Tomcat within most IDEs. There's plenty of articles on this elsewhere, so I won't cover it here.</p>

<h2>Adding Spring MVC</h2>

<p>We're going to use Spring MVC for this, so we need some additional changes to support that:</p>

<p>Add the following dependency to your pom.xml:</p>

<code type="xml">
	<dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>3.0.6.RELEASE</version>
        </dependency>
</code>

<p>We want to tell Tomcat to use Spring to dispatch requests, so we need to add the following lines to our web.xml:</p>

<code type="xml">
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>/WEB-INF/mvc-dispatcher-servlet.xml</param-value>
    </context-param>

    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <servlet>
        <servlet-name>mvc-dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>mvc-dispatcher</servlet-name>
        <url-pattern>*.html</url-pattern>
    </servlet-mapping>
</code>

<p>This will forward all requests for pages ending in ".html" to Spring and Spring will choose the appropriate controller to service each request. We also need to create an application context for Spring servlets, and this must live in src/main/webapp/WEB-INF/mvc-dispatcher-servlet.xml:<p>

<code type="xml">
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
    ">

    <context:component-scan base-package="tutorial"/>
    <context:annotation-config/>

    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix"><value>/WEB-INF/pages/</value></property>
        <property name="suffix"><value>.jsp</value></property>
    </bean>

</beans>
</code>

<p>This XML does two things:</p>

<ol>
<li>It tells Spring to scan classes in the package "tutorial" and beneath for classes annotated as beans.</li>
<li>How to convert the name of a view into it's resource. Essentially it says "take the name, prefix it with '/WEB-INF/pages' then suffix the result with '.jsp'".</li>
</ol>

<p>You might want to redeploy this to smoke test it.</p>

<p>To test this we'll need to display a page. The first page will be to display a list of all the users. We'll need two files; the first is the controller that services requests:</p>

<code type="java">
package tutorial;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
public class UsersController {

    @RequestMapping("/users")
    public String users(Model model) {
        return "users";
    }
}
</code>

<p>The second item is the page to display. This is based on the string returned by UsersController.users(), and using the rules for the resource resolver, we know this file must be WEB-INF/pages/users.jsp. Create stub of the page, something like:</p>

<code type="html5">
<html>
<body>
<h1>Users</h1>
</body>
</html>
</code>

<p>Finally, you can test this by redeploying to Tomcat and using a browser to view <a href="http://localhost:8080/tutorial-hibernate-jpa/users.html">http://localhost:8080/tutorial-hibernate-jpa/users.html</a>.</p>

<h2>Adding Spring ORM</h2>

<p>Spring contains support for injecting entity managers into beans, and this requires only a few lines of code to be added to your pom.xml and mvc-dispatcher-context.xml:</p>

<code type="xml">
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-orm</artifactId>
            <version>3.0.6.RELEASE</version>
        </dependency>
</code>

<code type="xml">
    <jee:jndi-lookup id="tutorialDS" jndi-name="java:/comp/env/jdbc/tutorialDS" expected-type="javax.sql.DataSource"/>

   <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="tutorialDS"/>
    </bean>
</code>

<p>The "jndi-lookup" element creates a bean from a JNDI resource, and this is used by the entity manager factory to create entity managers. Other JNDI objects can also be looked up in this fashion.</p>

<p>Note: you'll need to add the XML namespace and XSD to the root element: xmlns:jee="http://www.springframework.org/schema/jee."</p>

<p>Finally, we can add code to get the entity manager injected into our controller and get users from the database.</p>

<code type="java">
public class UsersController {

    @PersistenceContext
    private EntityManager entityManager;

    @RequestMapping("/users")
    public String users(Model model) {

        model.addAttribute("users", entityManager.createQuery("select u from User u").getResultList());

        return "users";
    }
}
</code>

<p>This code uses the entity manager to get all the users and binds it to an attribute called "users" that will be visible to our JSPs.</p>

<p>We will want to show the users on the page. For this, I'll use JSTL; you can use another technology if you prefer, but I'll quickly give you the bits you'd need if not. Again, there's plenty of good tutorials on JSTL out there if you're not familiar. Firstly,  add another dependency to you pom.xml:</p>

<code type="xml">
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>
</code>

<p>And update users.html displays the users:</p>

<code type="html5">
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<html>
<body>
<h1>Users</h1>
<table>
    <thead><tr><td>ID</td><td>Name</td></tr></thead>
    <tbody>
        <c:forEach var="user" items="${users}">
        <tr><td>${user.id}</td><td>${user.name}</td></tr>
        </c:forEach>
    </tbody>
</table>
</body>
</html>
</code>

<p>Finally, you can smoke test this in your browser.</p>

<h2>@Transactional</h2>

<p>The final piece of the puzzle is creating a user. To do this, we'll need a basic form, for example I've made pages/create-user.jsp:</p>

<code type="html5">
<html>
<body>
<h1>Create User</h1>
<form method="post">
Name: <input name="name"/>
<input type="submit"/>
</form>
</body>
</html>
</code>

<p>We need a controller to access this, so add this to UsersController:</p>

<code type="java">
    @RequestMapping(value = "/create-user", method = RequestMethod.GET)
    public String createUser(Model model) {
        return "create-user";
    }
</code>

<p>Note: that this method only accepts GET requests. When we POST the form, we'll need another method. You can smoke test this by redeploying to Tomcat and browsing to <a href="http://localhost:8080/tutorial-hibernate-jpa/create-user.html">http://localhost:8080/tutorial-hibernate-jpa/create-user.html</a>. You'll note that submitting the page results in a HTTP 405 error. We can service POST requests with the following (overloaded) method:</p>

<code type="java">
    @RequestMapping(value = "/create-user", method = RequestMethod.POST)
    @Transactional
    public String createUser(Model model, String name) {
        
        User user = new User();
        user.setName(name);
        
        entityManager.persist(user);
        
        return "redirect:/users.html";
    }
</code>

<p>We've used the @Transactional annotation here. When we do this, Spring will create a proxy object for our bean and manage the transaction for us, beginning, committing and rolling back when errors occur. This is much less code (one line vs about a dozen) and safer (less chance for a typographical error) than opening and closing the transaction ourself. You can see an example of the code for the verbose version in <a href="/?q=content/tutorial-hibernate-jpa-part-1">this post</a>. We need to tell Spring to support this by adding the following lines to our Spring context: telling it to use annotation based transactions, and what bean should manage the transactions:</p>

<code type="xml">
    <tx:annotation-driven/>

    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>
</code>

<p>Note: you'll need to add the correct schema the the document too:</p>

<code type="xml">
    xmlns:tx="http://www.springframework.org/schema/tx"
...
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
</code>

<p>You can test this by going to the page and submitting a new user. You'll be redirected to the users page afterwards where you should be able to see your new user.</p>

<h2>Conclusion</h2>

<p>In this example, there are more lines of XML than Java, but most of the XML is one-off set-up, and you'll find that as your app gets larger, the ratio drops. You can use Spring to support JPA entities, making a migration to/from JEE easier.</p>

<p>I've only covered the "C" and "R" parts of CRUD here, you should have enough information here to be able to try the rest yourself.</p>

<p>The code for this is on <a href="https://github.com/alexec/tutorial-hibernate-jpa/tree/part-2">Github</a>.</p>
™1338110059€Performance Tuning Challenge€<p>I'm currently reading <a href="http://www.amazon.co.uk/Java-Performance-Addison-Wesley-Charlie-Hunt/dp/0137142528">Java Performance by Charlie Hunt and Binu John</a>. It's a book that covers various aspects of Java specific performance testing. I wanted to test some of the approaches in the book, so I created an app on Github that has a series of problems. Without looking at the code, can you identify the performance problems?</p>

<p>Then can you find the causes of the problems? Try some fixes that does not involve any large architectural change (the architecture is necessarily poor)? Demonstrate that the fixes works (e.g. some before and after metrics)?</p>

<p>The code is <a href="https://github.com/alexec/performance-tuning-challenge">on Github</a>.

<p>If you've got some feedback, then please add some comments on Disqus!</p>™1338152546€JMeter Integration Test Template POM€<p>Here's the basic layout for a JMeter performance test using Cargo and Tomcat.</p>
<code type="xml">
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.alexecollins</groupId>
    <artifactId>jmeter-parent</artifactId>
    <version>0.0.1-SNAPSHOT</version>

    <url>http://www.alexecollins.com/</url>

    <dependencies>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>default</id>
                        <phase>clean</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <tasks>
                        <!-- delete some files to ensure that test run from the same base-line -->
                        <delete includeemptydirs="true">
                            <fileset dir="${project.basedir}">
                                <include name="**/jmeter.log"/>
                            </fileset>
                        </delete>
                    </tasks>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.cargo</groupId>
                <artifactId>cargo-maven2-plugin</artifactId>
                <version>1.2.0</version>
                <executions>
                    <!-- start AND deploy the war for this project,
                        war details need to be configured below too -->
                    <execution>
                        <id>start-container</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>start</goal>
                            <goal>deploy</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>stop-container</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <container>
                        <type>installed</type>
                        <containerId>tomcat6x</containerId>
                        <zipUrlInstaller>
                            <url>http://archive.apache.org/dist/tomcat/tomcat-6/v6.0.32/bin/apache-tomcat-6.0.32.zip</url>
                        </zipUrlInstaller>
                        <dependencies>
                            <!-- add data-source dependencies here-->
                        </dependencies>
                    </container>
                    <configuration>
                        <files>
                            <copy>
                                <!-- copy in our a server.xml file (originally taken from executing "mvn cargo:run")
                                     with added resource into Tomcat's conf dir -->
                                <file>src/test/conf/server.xml</file>
                                <todir>conf</todir>
                            </copy>
                        </files>
                        <properties>
                            <cargo.logging>medium</cargo.logging>
                        </properties>
                    </configuration
                    <deployer>
                        <deployables>
                            <deployable>
                                <!-- a page to ensure that the app is up and running before the
                                     load testing starts -->
                                <pingURL>http://localhost:8080/${project.build.finalName}/</pingURL>
                                <pingTimeout>300000</pingTimeout>
                            </deployable>
                        </deployables>
                    </deployer>
                    </configuration>
            </plugin>
            <plugin>
                <groupId>com.lazerycode.jmeter</groupId>
                <artifactId>jmeter-maven-plugin</artifactId>
                <version>1.4</version>
                <executions>
                    <execution>
                        <id>jmeter-tests</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>jmeter</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
</code>™1338328595€JMeter Custom Sampler Template€<p>Due to a lack of examples on the Internet, I've created a basic Maven project that combines a custom sampler with the Maven plugin.</p>

<p>The sampler sleeps for 100ms, which is reported by <a href="http://jmeter.lazerycode.com/">the Lazerycode JMeter plugin</a>.</p>

<p>You can find it <a href="https://github.com/alexec/jmeter-custom-sampler-template">on Github</a>.™1338419888€BoundedPriorityBlockingQueue€<p>This class seems missing from java.util.concurrent to me, so I've written <a href="https://github.com/alexec/concurrent/blob/master/src/main/java/com/alexecollins/concurrent/BoundedPriorityBlockingQueue.java">an implementation</a>. I'd imagine that it'd be easy to retrofit java.util.concurrent.PriorityBlockingQueue with the part necessary to make it work too.</p>™1339955153€Applet Model-View-Controller€<applet code="com.alexecollins.appletmvc.core.DispatcherApplet.class" archive="/sites/default/files/example-1.0.0-SNAPSHOT-jar-with-dependencies.jar" width="400" height="300">
<param name="defaultController" value="com.alexecollins.appletmvc.example.DefaultController">
</applet>
<p>As Prince might say, I've been partying like it two thousand zero zero out of time. And by "partying" I mean "coding"; coding Java applets. The applets I've been working on don't use AWT components, treating the applet as a canvas, close in design to the applets in the documentation examples. The applets display quite different data in different states, and have started to become God objects. The applets have states that are somewhat like small web pages which you navigate between, and I thought that there must be a better way to encapsulate them.</p>

<p>As an experiment, I wanted to see if you could use the MVC pattern to solve this. I have written a small framework that allows you to create and switch between "views" an the applet to provide encapsulated components. The core class is DispatcherApplet, inspired by Spring's DispatcherServlet, that manages the components.</p>

<p>The code includes some examples, such as a menu, a photo carousel and a beeper. Typically you create a view for each "page" in your applet, and then navigate around by called DispatcherApplet.setView. When views are used, they are activated, and when no longer used (as another view is going to be used) passivated. The draw method is called when the applet needs painting, and the view can inform the applet that it has changed by emitted an event. The dispatcher resets the applet to a clean state between views.</p>

<code type="java">
public interface View extends Activatable {
    /** Draw the view onto the graphics. */
    void draw(Graphics graphics) throws Exception;
    /** Add a listener for when the view changes. */
    void addViewChangedListener(ViewChangedListener listener);
    /** Remove a listener. */
    void removeViewChangedListener(ViewChangedListener listener);
}
</code>

<p>The starting view is determined by an applet parameter named "defaultController" (command pattern) which is executed when the applet starts to set the starting view, example:</p>

<code type="java">
public class DefaultController implements Controller {

    private final DispatcherApplet applet;

    public DefaultController(DispatcherApplet applet) {
        this.applet = applet;
    }

    public void execute() throws Exception {
        applet.setView(new MenuView(applet));
    }
}
</code>

<p>I've included a full MVC example in the form of CarouselView/CarouselModel. The model controls the animation by emitting events when the model of the image's position has changed, the view listens to the model and emits events to indicate the view has changed.</p>

<p>The code is <a href="https://github.com/alexec/applet-mvc">GitHub</a>.</p>™1340359256€Snippet: which-jar.sh€<p>I seem to spend a lot of time trying to find files in jars, so I wrote a script a while ago to do this.</p>

<code title="which-jar.sh">
#! /bin/sh
set -eu

if [ "$*" = "" ] ; then
        echo "usage: $(basename $0) pattern directory"
        exit 1
fi

P=$1 ;# filename pattern to find
D=$2 ;# directory to search in

for F in $(find $D -type f) ; do
        jar tf $F | grep $P | sed "s/.*/$(echo $F | tr '/' '\\\\/'):\\0/"
done
</code>™1340794484€Tomcat Context JUnit @Rule€<p>A first draft of a JUnit @Rule that create the test context. This can be used with the Spring context rule for <a href="/?q=content/tutorial-junit-rule">this post</a> to create a complete Spring context for integration tests.</p>

<code type="java">
/**
 * Creates an context for tests using an Apache Tomcat server.xml.
 *
 * https://blogs.oracle.com/randystuph/entry/injecting_jndi_datasources_for_junit
 *
 * @author alex.collins
 */
public class TomcatContextRule implements TestRule {

    public static final Logger LOGGER = Logger.getLogger(CatalinaContextRule.class);

    /**
     * Creates all the sub-contexts for a name.
     */
    public static void createSubContexts(Context ctx, String name) {
        String subContext = "";
        for (String x : name.substring(0, name.lastIndexOf('/')).split("/")) {
            subContext += x;
            try {
                ctx.createSubcontext(subContext);
            } catch (NamingException e) {
                // nop
            }
            subContext += '/';
        }
    }

    private final File serverXml;

    public TomcatContextRule(File serverXml, Object target) {
        if (serverXml == null || !serverXml.isFile()) {throw new IllegalArgumentException();}
        if (target == null) {throw new IllegalArgumentException();}
        this.serverXml = serverXml;
    }

    public Statement apply(final Statement statement, Description description) {
        return new Statement() {
            @Override
            public void evaluate() throws Throwable {
                createInitialContext();
                try {
                    statement.evaluate();
                } finally {
                    destroyInitialContext();
                }
            }
        };
    }

    private void createInitialContext() throws Exception {

        LOGGER.info("creating context");

        System.setProperty(Context.INITIAL_CONTEXT_FACTORY, org.apache.naming.java.javaURLContextFactory.class.getName());
        System.setProperty(Context.URL_PKG_PREFIXES, "org.apache.naming");

        final InitialContext ic = new InitialContext();

        createSubContexts(ic, "java:/comp/env");

        final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        final DocumentBuilder builder = factory.newDocumentBuilder();
        final Document document = builder.parse(serverXml);

        // create Environment
        {
            final NodeList envs = document.getElementsByTagName("Environment");
            for (int i = 0; i < envs.getLength(); i++) {
                final Element env = (Element)envs.item(i); // must be Element
                final String name = "java:comp/env/" + env.getAttribute("name");
                final Object instance = Class.forName(env.getAttribute("type")).getConstructor(String.class)
                        .newInstance(env.getAttribute("value"));

                LOGGER.info("binding " + name + " <" + instance + ">");

                createSubContexts(ic, name);

                ic.bind(name, instance);
            }
        }

        // Resource
        {
            final NodeList resources = document.getElementsByTagName("Resource");
            for (int i = 0; i < resources.getLength(); i++) {
                final Element resource = (Element)resources.item(i); // must be Element
                final String name = "java:comp/env/" + resource.getAttribute("name");
                final Class<?> type = Class.forName(resource.getAttribute("type"));

                final Object instance;
                if (type.equals(DataSource.class)) {
                    {
                        @SuppressWarnings("unchecked") // this mus be driver?
                        final Class<? extends Driver> driverClass = (Class<? extends Driver>) Class.forName(resource.getAttribute("driverClassName"));

                        DriverManager.registerDriver(driverClass.newInstance());
                    }

                    final BasicDataSource dataSource = new BasicDataSource();
                    // find all the bean attributes and set them use some reflection
                    for (Method method : dataSource.getClass().getMethods()) {

                        if (!method.getName().matches("^set.*")) {continue;}

                        final String x = method.getName().substring(3, 4).toLowerCase() + method.getName().substring(4);

                        if (!resource.hasAttribute(x)) {continue;}
                        Class<?> y = method.getParameterTypes()[0]; // might be primitive

                        if (y.isPrimitive()) {
                            if (y.getName().equals("boolean")) y = Boolean.class;
                            if (y.getName().equals("byte")) y = Byte.class;
                            if (y.getName().equals("char")) y = Character.class;
                            if (y.getName().equals("double")) y = Double.class;
                            if (y.getName().equals("float")) y = Float.class;
                            if (y.getName().equals("int")) y = Integer.class;
                            if (y.getName().equals("long")) y = Long.class;
                            if (y.getName().equals("short")) y = Short.class;
                            if (y.getName().equals("void")) y = Void.class;
                        }

                        method.invoke(dataSource, y.getConstructor(String.class).newInstance(resource.getAttribute(x)));
                    }

                    instance = dataSource;
                } else {
                    // not supported, yet...
                    throw new AssertionError("type " + type + " not supported");
                }

                LOGGER.info("binding " + name + " <" + instance + ">");

                createSubContexts(ic, name);

                ic.bind(name, instance);
            }
        }
    }

    private void destroyInitialContext() {
        System.clearProperty(Context.INITIAL_CONTEXT_FACTORY);
        System.clearProperty(Context.URL_PKG_PREFIXES);

        ic.unbind("java:comp/env");

        LOGGER.info("context destroyed");
    }

}
</code>

<p>For example:</p>

<code type="java">
 @Rule
    public TestRule rules = RuleChain.outerRule(new CatalinaContextRule(new File(getClass().getResource("/server.xml").getFile()), this))
            .around(new ContextRule(new String[] {"/applicationContext.xml"}, this));
</code>

<p>This code is on <a href="https://github.com/alexec/test-support">Github</a>.</p>™1340988896€Snippet: grep-jar.sh€<p>First draft of a script to grep for string inside jar (i.e. zgrep). I'm pretty sure there's a more elegant way of doing this, but this is functional.</p>

<code title="grep-jar.sh">

#! /bin/sh
set -eu

if [ $# -ne 2 ] ; then
        echo "usage: $(basename $0) pattern path" > /dev/stderr
        echo "  list the jar, file within the jar, and line in the file, where the line matches the pattern" > /dev/stderr
        exit 1
fi

P=$1 ;# pattern
D=$2 ;# directory
T1=$TMP/$(basename $0)

for F in $(find "$D" -type f -name '*.jar') ; do
        echo "examining $F..."
        rm -Rf $T1
        mkdir $T1
        unzip -q "$F" -d "$T1"
        grep -R "$P" "$T1" || true
done
</code>™1341304647€catalina-restart.sh€<p>A short script to stop Tomcat, and then restart it.</p>

<code>

#! /bin/sh
set -eu

while [ $(netstat -na | grep -c 8080) -ne 0 ] ; do
        echo "Stopping Catalina..."
        catalina.sh stop
        sleep 3s
done

catalina.sh jpda start
</code>™1341648878€Tutorial: Swing Synth PLAF Template - Part 1€<p>I've been working on a GUI app written is Swing recently, and there's been a request to make it look more modern and attractive. When people are asked to do this, they often start sub-classing components, or calling setters directly. This is the Swing equivalent of HTML inline styles, with a similar set of problems. In HTML you’d use CSS to solve this problem. There are two good methods of styling in Swing. The first is to sub-class an existing pluggable-look-and-feel (PLAF), or to use Synth PLAF and write matching code.</p>

<p>In <a href="http://www.alexecollins.com/?q=content/swing-plaf-example"> a previous post </a> I talked about sub-classing a Swing PLAF to get a modified theme.</p>

<p>The Synth PLAF provides a framework for creating your own. You do this by create two things: an XML file that defines coarse grained options such as colours, sizes, insets, and images; and a "painter" that provides a higher degree of control of the rendering of each component.</p>

<p>The code <a href="https://github.com/alexec/swing-synth-plaf-template">is on Github</a>. You can see a demo using SynthDemoApp.</p> 

<p>You specify the XML file programmatically when you choose the PLAF:</p>

<code type="java">
SynthLookAndFeel synth = new SynthLookAndFeel();
synth.load(CustomPainter.class.getResourceAsStream("synth.xml"), CustomPainter.class);
UIManager.setLookAndFeel(synth);
</code>

<p>There are two routes you can take when creating a theme, you can use images, or a custom painter. The advantage of using images is that it is quick and easy, but you cannot do more complex things, like changing the image based on arbitrary options. The advantage of a custom painter is versatility, but they are technically more difficult. As the former is <a href="http://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/synth.html">well documented at Oracle</a> I'm going to talk about custom painters.<p>

<p><a href="?q=content/tutorial-swing-synth-plaf-template-part-2-style-defaults">On to part 2 &rarr; </a></p>™1341749891€Swing PLAF Example€<p>One way to create a simple Swing PLAF it to sub-class an existing PLAF and override some if its option. The benefit of this approach is that is quick and simple. You choose what fonts and colours to override, and but fall back to the existing options if they’re not available.</p>

<p>Here's an example. It provides meta-data about the PLAF's name, and then overrides key defaults.</p>

<code type="java">
public class OverridingLookAndFeel extends MetalLookAndFeel {

	private static final Font font = new Font("Lucida Sans Unicode", Font.BOLD, 12);
	private static final ColorUIResource foreground = new ColorUIResource(100,25,0);
	private static final ColorUIResource background = new ColorUIResource(255,255,240);

	@Override
	public String getName() {
		return "OverridingLookAndFeel";
	}

	@Override
	public String getID() {
		return "OverridingLookAndFeel";
	}

	@Override
	public String getDescription() {
		return "Extends metal, changing a few new options";
	}

	@Override
	public boolean isNativeLookAndFeel() {
		return false;
	}

	@Override
	public boolean isSupportedLookAndFeel() {
		return true;
	}

	@Override
	protected void initComponentDefaults(UIDefaults table) {
		table.put("text", foreground);
		table.put("control", background);
		table.put("window", background);

		super.initComponentDefaults(table);

		table.put("Button.font", font);
		table.put("Button.foreground", foreground);

		final TreeSet<Object> objects = new TreeSet<Object>(new Comparator<Object>() {
			@Override
			public int compare(final Object o1, final Object o2) {
				return o1.toString().compareTo(o2.toString());
			}
		});
		objects.addAll(table.keySet());
		for (Object x : objects) {
			try {
				System.out.println(new Formatter().format("%40s = %s", x, table.get(x)));
			} catch(Exception e) {
				System.err.println(e);
			}
		}
	}
}
</code>

<p>A good way to test a PLAF (or just preview components in a theme) is by displaying a frame with common components on it.</p>

<code type="java">
public class DemoFrame extends JFrame {

    public DemoFrame() {
        setTitle("Swing Preview");

        // use name to target the frame
        getContentPane().setName("Frame");

        JPanel panel1 = new JPanel();
        JPanel panel2 = new JPanel();

        final DefaultTableModel model = new DefaultTableModel(new String[]{"Key", "Value"},0);
        for (Map.Entry<Object, Object> entry : UIManager.getDefaults().entrySet()) {
           model.addRow(new Object[] {
                   entry.getKey(), entry.getValue()
           });
        }
        final JProgressBar bar1 = new JProgressBar() {{
            setStringPainted(true);
        }};
        // animator for the progress bar
        new Thread(new Runnable() {
            @Override
            public void run() {
                while (true) {
                    final int i = bar1.getValue() + 1;
                    bar1.setValue(i % bar1.getMaximum());
                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                    }
                }
            }
        }).start();
	    final List<? extends JComponent> components = Arrays.asList(
                new JButton("Button") {{addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent actionEvent) {
                        JOptionPane.showMessageDialog(DemoFrame.this, "OptionPane");
                    }
                });}},
                new JCheckBox("Checkbox") {{setSelected(true);}},
                new JColorChooser(),
                new JComboBox(new String[] {"ComboBox Item 0", "ComboBox Item 1", "ComboBox Item 2"}),
                new JFileChooser("FileChooser"),
                new JEditorPane() {{setText("EditorPane");}},
                new JLabel("Label"),
                new JList(new String[] {"List Item 0", "List Item 1", "List Item 2", "List Item 3"}) {{setSelectedIndex(1);}},
                new JMenuBar(),
                new JPasswordField("PasswordField"),
                bar1,
			    new JProgressBar() {{
			        setIndeterminate(true);
			        setStringPainted(true);
			        setString("ProgressBar Indeterminate");
			    }},
                new JRadioButton("RadioButton") {{setSelected(true);}},
                new JSlider(),
                new JSpinner(new SpinnerDateModel()),
                new JScrollPane(new JTable(model)),
                new JTextArea("TextArea"),
                new JTextField("TextField"),
                new JToggleButton("ToggleButton"),
                new JToolBar(),
                new JTree()
        );

        for (JComponent c : components) {
            final boolean l = c instanceof JColorChooser || c instanceof JFileChooser || c instanceof JScrollPane;
            final JPanel panel = l ? panel2 : panel1;
	        c.setToolTipText(c.toString());
            panel.add(c);
        }

        add(new JSplitPane(JSplitPane.VERTICAL_SPLIT, new JScrollPane(panel1), new JScrollPane(panel2)));

        pack();
    }
}
</code>

<p>And a short app.</p>

<code type="java">
public static void main(String[] args) throws Exception {
    SwingUtilities.invokeAndWait(new Runnable() {
        @Override
        public void run() {
        try {
                UIManager.setLookAndFeel(new OverridingLookAndFeel());
                final DemoFrame f = new DemoFrame();
                f.addWindowListener(new WindowAdapter() {
                    @Override
                    public void windowClosing(WindowEvent e) {
                        System.exit(0);
                    }
                });
                f.setVisible(true);
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
   });
}
</code>

<p>The benefits of this approach is that you can get up and running fast, the main con being that you need to carefully choose an existing PLAF to modify, as the more you vary yours from the PLAF, the more work you'll create, ultimately you may find that the overridden PLAF is limiting.</p>

<p>The code for this is <a href="https://github.com/alexec/swing-synth-plaf-template">on Github</a>.</p>

<p>If you're interested in look and feel, then you may want to read <a href="?q=content/tutorial-swing-synth-plaf-template-part-1">my example of doing a Swing Synth based PLAF.</p>™1341753904€Tutorial: Swing Synth PLAF Template - Part 2: Style Defaults€<p>Firstly, we'll want to and some common values in one place accessible to all.</p>

<code type="xml">
<synth>
    <object class="javax.swing.plaf.ColorUIResource" id="fg"><int>0</int><int>0</int><int>0</int></object>
    <object class="javax.swing.plaf.ColorUIResource" id="bg"><int>255</int><int>255</int><int>255</int></object>
    <object class="javax.swing.plaf.ColorUIResource" id="focus"><int>50</int><int>50</int><int>127</int></object>
</code>

<p>We use colour objects, so we can use the same colours later on without breaking the DRY principle. Also you can make components transparent; adding opacity as necessary.</p>

<p>By default some components will throw exceptions unless you make some basic settings that apply to all components.</p>

<code type="xml">

<style id="default">
    <opaque value="false"/>
    <font name="Lucida Sans Unicode" size="12"/>
    <state>
        <color type="FOREGROUND" idref="fg"/>
        <color type="TEXT_BACKGROUND" idref="bg"/>
        <!-- The color used in highlighting components. -->
        <color type="FOCUS" idref="focus"/>
    </state>
</style>
<bind style="default" type="region" key=".*"/>
</code>

<p>A word of warning, synth tends to fail quietly, so you want to be careful to make small changes, and test them incrementally.</p>

<p>There's a handy <a href="http://www.ampsoft.net/webdesign-l/WindowsMacFonts.html">list of common fonts</a>.</p>

<p>You might also want consistent insets on certain components:</p>

<code type="xml">
<style id="padding">
    <insets top="5" right="5" bottom="5" left="5"/>
</style>
<bind style="padding" type="region" key="Button"/>
<bind style="padding" type="region" key="ComboBox"/>
<bind style="padding" type="region" key="PasswordField"/>
<bind style="padding" type="region" key="TextField"/>
<bind style="padding" type="region" key="TextArea"/>
<bind style="padding" type="region" key="EditorPane"/>
<bind style="padding" type="region" key="List"/>
<bind style="padding" type="region" key="Tree"/>
</code>

<p><a href="?q=content/tutorial-swing-synth-plaf-template-part-1">&larr; Back to part 1</a> ~ <a href="?q=content/tutorial-swing-synth-plaf-template-part-3-custom-painter">On to part 3 &rarr;</a></p>™1341754701€Tutorial: Swing Synth PLAF Template - Part 3: Custom Painter€<p>A custom painter is key to creating attractive backgrounds. A custom painter can be specified in the XML using a simple tag:</p>

<code type="xml">
<object id="painter" class="com.alexecollins.swing.plaf.synth.template.CustomPainter"/>
</code>

<p>And chosen for a component:</p>

<code type="xml">
<style id="panel">
    <painter method="panelBackground" idref="painter"/>
</style>
<bind style="panel" type="region" key="Panel"/>
</code>

<p>The name of the method to use must have the correct name for the component; panel must called paintPanelBackground.</p>

<p>I want some supporting method for getting style etc:</p>

<code type="java">
public class CustomPainter extends SynthPainter {

/** Background image for panels. */
	private final Image background;
	static final Stroke THIN_STROKE = new BasicStroke(2);
	
	public CustomPainter() throws IOException {
	    this.background = ImageIO.read(getClass().getResource("images/background.png"));
	}

...

	private int getArc(SynthContext context) {
	    return getArc(context.getComponent());
	}
	
	public static int getArc(Component component) {
	    // lists appear to mess up arcs
	    return component instanceof  JList ? 0 : component.getFont().getSize() / 2;
	}
</code>

<p><a href="?q=content/tutorial-swing-synth-plaf-template-part-2-style-defaults">&larr; Back to part 2</a> ~ <a href="?q=content/tutorial-swing-synth-plaf-template-part-4-tiling-images">On to part 4 &rarr;</a></p>™1341755150€Tutorial: Swing Synth PLAF Template - Part 4: Tiling Images€<p>I wanted to display a tiling image as the background of panels, but I found that synth would stretch images, even when requested not to. I created a short piece of code to tile the image:</p>

<code type="java">
@Override
public void paintPanelBackground(SynthContext context, Graphics graphics, int x, int y, int w, int h) {
    Graphics2D g2 = (Graphics2D)graphics;
    // tile the image
    int x1 = x;
    while (y < h) {
        x = x1;
        while (x < w) {
            g2.drawImage(background, x,y, null);
            x+=background.getWidth(null);
        }
        y+=background.getHeight(null);
    }
}
</code>

<p><a href="?q=content/tutorial-swing-synth-plaf-template-part-3-custom-painter">&larr; Back to part 3</a> ~ <a href="?q=content/tutorial-swing-synth-plaf-template-part-5-gradients">On to part 5 &rarr;</a></p>™1341755580€Tutorial: Swing Synth PLAF Template - Part 5: Gradients€<p>I wanted a vertical gradient <a href="http://docs.oracle.com/javafx/2/get_started/css.htm">similar to that in the JavaFX tutorial</a>. This uses the foreground of the component to choose the colours, something you cannot do with images. I wanted a smooth, anti-aliased, border.</p>

<code type="java">
	/** Paint the component using a gradient based on the two provided colors. */
    public static void paintVerticalGradient(Graphics g, int x, int y, int w, int h, int arc, Color fg, Color bg) {
        Graphics2D g2 = (Graphics2D)g;
        g2.setPaint(getGradient(x, y, h, fg, bg));
        g2.fillRoundRect(x, y, w - 1, h - 1, arc, arc);
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2.setColor(fg);
        g2.setStroke(THIN_STROKE);
        g2.drawRoundRect(x, y, w - 1, h - 1, arc, arc);
    }

    public static GradientPaint getGradient(int x, int y, int h, Color fg, Color bg) {
        return new GradientPaint(x, y, bg, x, y + h, fg);
    }

	private GradientPaint getGradient(SynthContext context, int x, int y, int h) {
		// For simplicity this always recreates the GradientPaint. In a
		// real app you should cache this to avoid garbage.
		return new GradientPaint(x, y, context.getStyle().getColor(context, ColorType.BACKGROUND), 
				x, y + h, context.getStyle().getColor(context, ColorType.FOREGROUND));
	}

	private void paintVerticalGradient(SynthContext context, Graphics g, int x, int y, int w, int h) {
        final int arc = getArc(context);
        Graphics2D g2 = (Graphics2D)g;
        g2.setPaint(getGradient(context, x, y, h));
        g2.fillRoundRect(x, y, w - 1, h - 1, arc, arc);
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2.setColor(context.getStyle().getColor(context, ColorType.FOREGROUND));
        g2.setStroke(THIN_STROKE);
        g2.drawRoundRect(x, y, w - 1, h - 1, arc, arc);
    }
    @Override
    public void paintButtonBackground(SynthContext context,Graphics g, int x, int y,int w, int h) {
        paintVerticalGradient(context, g, x, y, w, h);
    }

</code>

<p>Note that I don't hard code the colours, I get them from the XML.</p>

<p>You'll need the XML to apply the painter:<p>

<code type="xml">
<style id="button"><painter method="buttonBackground" idref="painter"/></style>
<bind style="button" type="region" key="Button"/>
</code>

<p>We can get components to change colour when the mouse is over:</p>

<code type="xml">
<style id="hover">
	<state value="MOUSE_OVER">
		<color idref="focus" type="FOREGROUND"/>
	</state>
</style>
<bind style="hover" type="region" key="Button"/>
</code>

<p><a href="?q=content/tutorial-swing-synth-plaf-template-part-4-tiling-images">&larr; Back to part 4</a> ~ <a href="?q=content/tutorial-swing-synth-plaf-template-part-6-text-fields">On to part 6 &rarr;</a></p>™1341755852€Tutorial: Swing Synth PLAF Template - Part 6: Text Fields€<p>For text fields, and the like I wanted a similar area to that in the JavaFX tutorial too. I also wanted the edge to change colour when focussed, using the colour from the XML.  You can see in this sample that we're reusing colours again, and anti-aliasing.</p>

<code type="java">
private void paintBorder(SynthContext context, Graphics g, int x, int y, int w, int h) {
    Graphics2D g2 = (Graphics2D)g;

    final int arc = getArc(context);
    final boolean isFocused = (context.getComponentState() & SynthConstants.FOCUSED) > 0;

    g2.setColor(context.getStyle().getColor(context, ColorType.BACKGROUND));
    g2.fillRoundRect(x + 1, y + 1, w - 3, h - 3, arc, arc);
    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
    g2.setColor(isFocused ? getHighlight(context) : context.getStyle().getColor(context, ColorType.FOREGROUND));
    g2.setStroke(thin);
    g2.drawRoundRect(x, y, w - 1, h - 1, arc, arc);
}
</code>

<p><a href="?q=content/tutorial-swing-synth-plaf-template-part-5-gradients">&larr; Back to part 5</a> ~ <a href="?q=content/tutorial-swing-synth-plaf-template-part-7-scroll-bars">On to part 7 &rarr;</a></p>™1341756080€Tutorial: Swing Synth PLAF Template - Part 7: Scroll-bars€<p>OK - I'm operating on an 80/20 rule here. Some components are simpler and easier to code, but some you really need. As scrollbar is one. It's more complex than other components, consisting of arrows, a thumb which you drag along, and a track that the thumb sits in.</p>

<p>To keep scrollbar simple, firstly I removed the arrows:</p>

<code type="xml">
<style id="scrollBarArrowStyle"><property key="ArrowButton.size" type="integer" value="0" /></style>
<bind style="scrollBarArrowStyle" type="REGION" key="ArrowButton" />
</code>

<p>Then, I made the track (the background) white with a small inset:</p>

<code type="xml">
<style id="scrollbarTrackStyle">
    <opaque value="true"/>
    <state>
        <insets top="1" right="1" bottom="1" left="1"/>
        <color value="#ffffff" type="BACKGROUND"/>
    </state>
</style>
<bind style="scrollbarTrackStyle" type="REGION" key="ScrollBarTrack" />
</code>

<p>Finally, I created a semi-transparent thumb:</p>

<code type="java">
@Override
public void paintScrollBarThumbBackground(SynthContext context, Graphics g, int x, int y, int w, int h, int i4) {
    Graphics2D g2 = (Graphics2D)g;
    int arc = getArc(context);

    g2.setColor(createTransparentColor(context.getStyle().getColor(context, ColorType.BACKGROUND).darker().darker()));
    g2.fillRoundRect(x + 1, y + 1, w - 2, h - 2, arc, arc);
}

/** Make an existing colour transparent. */
private static Color createTransparentColor(Color color) {
    return new Color(color.getRed(), color.getGreen(), color.getBlue(), 0x88);
}
</code>

<p><a href="?q=content/tutorial-swing-synth-plaf-template-part-6-text-fields">&larr; Back to part 6</a> ~ <a href="?q=content/tutorial-swing-synth-plaf-template-part-8-check-boxes-and-radio-buttons">On to part 8 &rarr;</a></p>
™1341758426€Tutorial: Swing Synth PLAF Template - Part 8: Check-boxes and Radio-buttons€<p>These are quite similar, they both have a selectable icon on their left, and text describing it on the right. A custom painter can create the icon, but based on what? As components can grow, if we used the component size, we'd have a variety of different sizes on any form.</p>

<p>To create check-boxes we create a separate class that implements Icon:</p>

<code type="java">
public abstract class CheckBoxIcon implements Icon {

    private final int size;

    public CheckBoxIcon(int size) {
        this.size = size;
    }

    @Override
    public void paintIcon(Component c, Graphics g, int x, int y) {
        CustomPainter.paintVerticalGradient(g, x, y, getIconWidth(), getIconHeight(),
		        CustomPainter.getArc(c),
		        c.getForeground(), c.getBackground());
    }

    @Override
    public int getIconWidth() {
        return size;
    }

    @Override
    public int getIconHeight() {
        return size;
    }
}
</code>

<p>We can then sub-class that for selected an unselected versions:</p>

<code type="java">
public class CheckBoxOffIcon extends CheckBoxIcon {
    public CheckBoxOffIcon(int size) {
        super(size);
    }
}
</code>

<code type="java">
public class CheckBoxOnIcon extends CheckBoxIcon {

    public CheckBoxOnIcon(int size) {
        super(size);
    }

    @Override
    public void paintIcon(Component c, Graphics g, int x, int y) {
        super.paintIcon(c, g, x, y);
        Graphics2D g2 = (Graphics2D) g;
        int a = CustomPainter.getArc(c);
        g2.setStroke(CustomPainter.THIN_STROKE);
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2.drawPolyline(new int[]{x + a, x + getIconWidth() / 2, x + getIconWidth()},
                new int[]{y + getIconWidth() / 2, y + getIconHeight() - a, y}, 3);
    }
}
</code>

<p>Finally, we need to tell synth to use those two classes:</p>

<code type="xml">
<style id="checkbox">
    <object id="checkOff" class="com.alexecollins.swing.plaf.synth.template.CheckBoxOffIcon"><int>16</int></object>
    <object id="checkOn" class="com.alexecollins.swing.plaf.synth.template.CheckBoxOnIcon"><int>16</int></object>
    <property key="CheckBox.icon" type="idref" value="checkOff"/>
    <state value="SELECTED"><property key="CheckBox.icon" type="idref" value="checkOn"/></state>
</style>
<bind style="checkbox" type="region" key="CheckBox"/>
</code>

<p>Code for radio button is very similar.</p>

<p><a href="?q=content/tutorial-swing-synth-plaf-template-part-7-scroll-bars">&larr; Back to part 7</a> ~ <a href="?q=content/tutorial-swing-synth-plaf-template-part-9-lists">On to part 9 &rarr;</a></p>
™1341758698€Tutorial: Swing Synth PLAF Template - Part 9: Lists€<p>More 80/20 rule here. We just specify a colour to highlight the selected option.</p>

<code type="xml">
<style id="list"><painter method="listBackground" idref="painter"/>
    <state><color type="TEXT_BACKGROUND" idref="focus"/></state></style>
<bind style="list" type="region" key="List"/>
</code>

<p><a href="?q=content/tutorial-swing-synth-plaf-template-part-8-check-boxes-and-radio-buttons">&larr; Back to part 8</a> ~ <a href="?q=content/tutorial-swing-synth-plaf-template-part-10-progress-bars">On to part 10 &rarr;</a></p>
™1341758844€Tutorial: Swing Synth PLAF Template - Part 10: Progress Bars€<p>These are tougher - they come in determinate and indeterminate flavours. We're only going to support the indeterminate version for now, reusing components.</p>

<code type="java">
@Override
public void paintProgressBarBackground(SynthContext context, Graphics graphics, int x, int y, int w, int h) {
	paintBorder(context, graphics, x, y, w, h);
    paintVerticalGradient(context, graphics, x, y, (int)(w * ((JProgressBar) context.getComponent()).getPercentComplete()), h);
}
</code>

<p><a href="?q=content/tutorial-swing-synth-plaf-template-part-9-lists">&larr; Back to part 9</a> ~ <a href="?q=content/tutorial-swing-synth-plaf-template-part-11-targeting-styles">On to part 11 &rarr;</a></p>™1341759771€Tutorial: Swing Synth PLAF Template - Part 11: Targeting Styles€<p>Is CSS, you can target elements and style them specially, e.g. as a title, or important button. You can do the same in Swing by setting their name:</p>

<code type="java">
new JButton("Button named 'primary'") {{setName("primary");}}
</code>

<p>In the XML you can set-up colours for this name and they’ll be applied.</p>

<code type="xml">
<object class="javax.swing.plaf.ColorUIResource" id="primaryfg"><int>255</int><int>0</int><int>0</int></object>
<object class="javax.swing.plaf.ColorUIResource" id="primarybg"><int>50</int><int>50</int><int>50</int></object>

<style id="primary">
    <state><color type="FOREGROUND" idref="primaryfg"/>
        <color type="BACKGROUND" idref="primarybg"/> </state>
</style>
<bind style="primary" type="name" key="primary"/>
</code>

<p><a href="?q=content/tutorial-swing-synth-plaf-template-part-10-progress-bars">&larr; Back to part 10</a> ~ <a href="?q=content/tutorial-swing-synth-plaf-template-part-12-conclusion">On to part 12 &rarr;</a></p>™1341760166€Tutorial: Swing Synth PLAF Template - Part 12: Conclusion €<h2>Conclusion</h2>

<p>Hopefully I’ve shown that you can create the main arts of on attractive interface, fairly easily, and that your apps don’t need to stay in 2005 anymore. The code <a href="https://github.com/alexec/swing-synth-plaf-template">is on Github</a> and is designed as a template for creating Synth themes, so you can start your own.</p>

<p>Some other notes:</p>

<ul>
<li>I’ve left some components untouched: slider, spinner, toggle button, table, and tree.</li>
<li>I’ve not talked about controlling the sizing components. Perhaps I'll blog about this soon.</li>
</ul>

<p><a href="?q=content/tutorial-swing-synth-plaf-template-part-11-targeting-styles">&larr; Back to part 11</a></p>™1341956323€Secure Edit€<p>Secure-Edit is a simple plain-text editor that save each file using AES encryption with a password unique to that file.</p>

<p>Uses:</p>

<ul>
<li>Prevent documents on your computer from being vulnerable to viruses or other malware, or if your computer is compromised. For example, you might want to keep a list of passwords safe, but you don't use full disk encryption or a haven't set a password.</li>
<li>Safely share documents with friends over insecure email or via a USB you might loose, or might go out of your control</li>
</ul>

<p>Do not email the password, especially with the document.</p>

<p><a href="/sites/default/files/secure-edit-1.0.0.jar">Download latest version</a> SHA-1 9dd0df33271dbf1183c646c4255ef38b82260f9f</p>

<p>The code is <a href="https://github.com/alexec/secure-edit">Github</a>.</p>

<p>Note: that it is not intended for commercial/governmental use.</p>™1342184788€Snippet: Copy a File€<code type="java">
private static void copyFile(File sourceFile, File destFile) throws IOException {
	if (sourceFile == null) {
		throw new IllegalArgumentException();
	}
	if (destFile == null) {
		throw new IllegalArgumentException();
	}

	if (!destFile.exists()) {
		destFile.createNewFile();
	}

	FileChannel in = new FileInputStream(sourceFile).getChannel();
	try {
		FileChannel out = new FileOutputStream(destFile).getChannel();
		try {
			out.transferFrom(in, 0, in.size());
		} finally {
			out.close();
		}
	} finally {
		in.close();
	}
}
</code>™1342202293€Snippet: JavaFX Maven POM€<p>I could not find a good example, so here's my template.</p>

<code type="xml" title="pom.xml">
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.alexecollins.javafx</groupId>
    <artifactId>template</artifactId>
    <version>1.0.0-SNAPSHOT</version>

    <properties>
        <javafx.version>2.1</javafx.version>
        <javafx.home>C:\\Program Files\\Oracle\\JavaFX ${javafx.version} SDK\\rt</javafx.home>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.oracle</groupId>
            <artifactId>javafx</artifactId>
            <version>${javafx.version}</version>
            <systemPath>${javafx.home}/lib/jfxrt.jar</systemPath>
            <scope>system</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.3.2</version>
                <configuration>
                    <source>1.7</source>
                    <target>1.7</target>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
</code™1342649792€Claim Check€Don't ask...

QA9NKRGZMEXJ™1342785512€Tips For Robust Bash Scripts€<p>Here are a couple of quick tips for writing more robust shell scripts from my last 10 years of working with bash.</p>

<h2>Tip 1: Use "set -e"</h2>

<p>This will cause your script to exit if an error occurs.</p>

<code>
#! /bin/sh
set -e

false ;# ops! exit here
</code>

<p>If errors are OK, you can add "|| true" so that it'll continue.</p>

<code>
#! /bin/sh
set -e

false || true ;# this is OK
</code>

<h2>Tip 2: Use "set -eu"</h2>

<p>This means your script will exit  if variables are not set, example:</p>

<code>
echo $FOO ;# ops, $FOO not defined
</code>

<p>You can provide defaults...</p>

<code>
echo ${FOO:-'default'} ;# this is OK
</code>

<h2>Tip 3: Quote All Strings</h2>

<p>You never know when an empty string  will sneak in and break your script.</p>

<code>
% F=""
% if [ $F == "" ] ; then echo "F is blank"; fi
-bash: [: ==: unary operator expected
</code>

<h2>Tip 4: Consider "find/while" Rather Than "for/find"</h2>

<p>This is tolerant to spaces; and it's faster. This paradigm can be used is similar scenarios.</p>

<code title="bad">
% for F in $(find . -type f) ; do echo $F; done
...
./win
file.txt
...
</code>

<code title="good">
% find . -type f | while read F ; do echo $F ; done
...
./win file.txt
</code>

<p>If you enjoyed this post, perhaps you'd enjoy <a href="?q=content/robust-cronjobs">this post on robust cron-jobs</a>.</p>™1342956264€Web Site Link Checker€<p>This is a simple command line application that crawls a website for broken links.</p>

<code>
$ java -jar link-checker-1.0.0-jar-with-dependencies.jar http://www.alexecollins.com/
http://www.alexecollins.com/ broken link to http://www.google.com/search?hl=en&q=allinurl%3Afile+java.sun.com&btnI=I%27m%20F</body></html>: java.net.URISyntaxException: Illegal character in query at index 80: http://www.google.com/search?hl=en&q=allinurl%3Afile+java.sun.com&btnI=I%27m%20F</body></html>
..
http://www.alexecollins.com/http//covestor.com/
http://www.alexecollins.com/?q=content/swing-plaf-example: failed to process link http://www.alexecollins.com/content/tutorial-swing-synth-plaf-template-part-1: java.io.FileNotFoundException: http://www.alexecollins.com/content/tutorial-swing-synth-plaf-template-part-1
Done - 39027 ms
</code>

<p><a href="/sites/default/files/link-checker-1.0.0-jar-with-dependencies.jar">Download latest version</a> SHA-1 3897574e6ba2fc0c2034159cad2c72d36f320f4e</p>

<p>The code is <a href="https://github.com/alexec/link-checker">Github</a>.</p>
™1343080380€Snippet: Groovy Maven Template€<code type="xml">

</code>™1343862513€Performance Testing€<h2>Overview</h2>

<p>Performance tuning an application is time consuming, and expensive. Useful tests often needs dedicated hardware to run on, it's specialised and time consuming to prepare the ground work and write the various fixtures needed to test, and whose only perceived benefit is preventing a production issue that you don't even know will happen yet.</p>

<h2>Stero-typical Scenarios and Outcomes</h2>

<p>Here's some stereotypes I've encountered:</p>

<ul>
<li>A feature release contains a new feature that wasn't (or even could not have been) tested that has a major performance issue from the outset.</li>
<li>A change to existing code, perhaps to finesse or refine an existing feature, perhaps one that's not been requested by the customer, introduces a catastrophic performance issue.</li>
<li>A sleeper: a change in the system that only occurs after some time (e.g. running out 4-byte int for a serial column, resulting in that database table scanning for unused keys).</li>
<li>Change of use: it was designed to be used in one way, and then the customer starts using it in another way.</li>
<li>Age: the database just gets too big and queries start to time out.</li>
</ul>

<p>A common resolution to these is a herculean effort: late night and weekends with people on the phone asking "When will my site be fixed? Who's responsible for this?". I've heard this called "hero culture", and it's a development mentality that can perversely reward those who might have been expected to prevent the problem, as they are the ones capable of fixing it.</p>

<p>After resolution, a period of self-reflection. People are asking what can be done to show willingness to tackling the problem; perhaps in a one-off performance tuning exercise by a specialist, which resolves current issues. But, if the analysis is done by a seconded specialist who's not part of the team, it's an exercise whose lessons are not disseminated, and is not repeatable. Those who do not learn lessons from the past are doomed to repeat it.</p>

<p>This might be a fait-au-complet: if performance testing is more expensive than the cost of fixing periodic production issues, then this is the most logical, most cost effective approach.</pP

<p>Many system, perhaps due to cost or lack of time, have not been developed in a way that is amenable to automated testing. After all, when it's first written, you don't know if it's going to be a commercial success, so why spend money making software maintainable if it might never need to be maintained?</p>

<p>The inability to test the performance of changes can mean that improvements to the system are prevented; the cost of introducing a bug cannot be mitigated. People start to fear changes and you stagnate. A younger, faster, competitor learns from your trail-blazing and quickly writes a more modern, cheaper version of your software and starts taking your business.</p>

<h2>Resolution - Automated Performance Testing</h2>

<p>How do you fix this? How do you take a system that might even be hostile to testing, and change it so that releases become bug free and robust?</p>

<h3>Strong Foundations</h3>

<p>You should make sure your code base is reliable before you consider performance testing. Most of this is common sense.</p>

<ol>
<li>Change and test incrementally</li>
<li>Bugs first, features second; new features will only introduce new bugs, so make sure you fix any bugs first</li>
<li>Use a well developed build system</li>
<li>Be able to write and execute unit tests on your code.</li>
</ol>

<h2>Integration Test</h2>

<p>Integration test form the first part step toward full unit testing. There's many framework, depending on how users or client interface. If it is a web app, then you might use Selenium, a web service, a hand rolled SOAP client<a href="#footnote-1" style="vertical-align:super;">1</a>. Regardless, to run integration test, you'll need to be able to:</p>

<ol>
<li>Build your app</il>
<li>Deploy to a test environment</li>
<li>Execute the tests</li>
<li>Report the results.</li>
</ol>

<p>You should be able to do this at the touch of a button, otherwise you'll be the only person able to do it.</p>

<p>To do this you'll find that:</p>

<ol>
<li>You understand the architecture of your app</li>
<li>You know how to create a suitable environment for it</li>
<li>You understand the deployment scripts</li>
<li>You can deploy it automatically.</li>
<li>

<p>These are key to automating performance testing.</p>

<h3>Performance Testing</h3>

<p>Unit testing, and to some degree integration testing, have binary outcomes: they pass and everyone's happy, they fail, and there's a bug. To a similar degree, the tools<a href="#footnote-2"> are well supported and everyone knows how to use them.</p>




<h1>Footnotes</h1> 

<p><a name="footnote-1" style="vertical-align:super;">1</a> JUnit is a unit testing framework, its popularity has made it a common choice for integration testing, but you'll want to consider what the key differences are.</p>

<p><a name="footnote-2" style="vertical-align:super;">2</a> I'd mention that your integration and performance tests need not be written in the same language as your app. However, there are benefits of interoperability that should weigh highly in your choice.</p>™1344766945€5 Minute EasyB BDD Tutorial€<p>This is a 5 minute tutorial on how to write a test story using <a href="http://www.easyb.org">EasyB</a>, a Groovy based behaviour driven development system for Java.</p> 

<p>You'll need Maven installed and you may want to have an IDE with Maven and Groovy integration. Additionally, both IntelliJ and Eclipse also provide EasyB plugins that allow you to run individual stories.</p>

<p>Firstly create a skeleton project, and add these plugins to your POM:</p>

<code type="xml">
<!-- needed for Groovy 1.7.10 -->
<plugin>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>2.5.1</version>
    <configuration>
        <source>1.5</source>
        <target>1.5</target>
    </configuration>
</plugin>
<plugin>
    <groupId>org.easyb</groupId>
    <artifactId>maven-easyb-plugin</artifactId>
    <version>1.2</version>
    <executions>
        <execution>
            <goals>
                <goal>test</goal>
            </goals>
        </execution>
    </executions>
</plugin>
</code>

<p>If, like me, you want to run them in your IDE you may want to add a Groovy runtime:</p>

<code type="xml">
<!-- needed to run tests from within IntelliJ -->
<dependency>
    <groupId>org.codehaus.groovy</groupId>
    <artifactId>groovy</artifactId>
    <version>1.7.10</version>
    <scope>test</scope>
</dependency>
</code>

<p>We need a test subject, in this tutorial account, implementation to be filled in later:</p>

<code type="java" title="Account.java">
public class Account {
	public void add(BigDecimal amount) {
		// nop
	}
	
	public BigDecimal getBalance() {
		return BigDecimal.ZERO;
	}
}
</code>

<p>Finally a test for it. The Maven plugin in expects tests to be in "src/test/easyb" and named either "*Story.groovy" or "*.story":</p>

<code title="AccountStory.groovy">
description "account semantics"

scenario "increasing an empty account", {

    given "an empty account",{
        sut = new Account()
    }

    when "1 is added", {
        sut.add(BigDecimal.ONE)
    }

    then "the balance should be 1", {
        sut.getBalance().shouldBe BigDecimal.ONE
    }
}
</code>

<p>Runs this test, either by executing "mvn test" or using your IDE. You should see:</p>

<code>
FAILURE Scenarios run: 1, Failures: 1, Pending: 0, Time elapsed: 1.05 sec

	scenario "empty account"
	step THEN "the balance should be 1" -- expected 1 but was 0
</code>

<p>The test failed. Append another scenario to the file:</p>

<code>
scenario "decreasing an empty account", {

    given "an empty account",{
        sut = new Account()
    }

    when "1 is subtracted", {
        subtract = {sut.add(BigDecimal.ZERO.subtract(BigDecimal.ONE))}
    }

    then "an exception occurs", {
        ensureThrows(Exception) { subtract() }
    }
}
</code>

<p>Note that we have to use a closure to capture the failure (not ideal). Run the test story again:</p>

<code>
FAILURE Scenarios run: 2, Failures: 2, Pending: 0, Time elapsed: 1.409 sec

	scenario "increasing an empty account"
	step THEN "the balance should be 1" -- expected 1 but was 0
	scenario "decreasing an empty account"
	step THEN "an exception occur" -- expected exception of type [class java.lang.Exception] was not thrown
</code>

<p>Finally, make the test subject work:</p>

<code type="java">
public class Account {
	private BigDecimal balance = BigDecimal.ZERO;

	public void add(BigDecimal amount) {
		if (balance.add(amount).compareTo(BigDecimal.ZERO) < 0) {
			throw new IllegalArgumentException("cannot have < 0 balance");
		}
		balance = balance.add(amount);
	}

	public BigDecimal getBalance() {
		return balance;
	}
}
</code>

<p>Finally, you can run this and see all your tests pass.</p>

<p>The code for this is <a href="https://github.com/alexec/easyb-tutorial">Github</a>.</p>™1346010026€Snippet: Can't Remember That -XX Option?€<p>A handy recent find:</p>

<code>
% java -XX:+UnlockDiagnosticVMOptions -XX:+PrintFlagsFinal -version
...
    uintx MinPermHeapExpansion                      = 327680          {product}           
    uintx PermGenPadding                            = 3               {product}           
    uintx PermMarkSweepDeadRatio                    = 20              {product}  
...
</code>™1346010854€Testing - Pt 1€<p>I love automated testing. In a rare diversion into op-ed<a href="#1"><sup>1</sup></a> I thought a put few thoughts (read - opinions) together.</p>

<p>Before I start on how best to compose your tests, I briefly ask - What are the reasons for testing? Broadly, I think they are:</p>

<ol>
<li>		Reduce total number of bugs / increase product stability
<li>		Ensure software works as per specification
<li>		Achieve the above at low cost, low impact.</ol>

<p>I think this boils down to providing software that does what your customer wants (features), doesn't do what they don't want (bugs), and do it without making too much noise (cost).</p>

<p><a href="?q=content/testing-pt-2-choosing-your-system">On to part 2 &rarr;</a></p>

<p><a name="1"/> http://en.wikipedia.org/wiki/Op-ed - "and thereon I decided to print opinions, ignoring facts."</p>
™1346015729€Testing - Pt 2- Choosing Your System€<p class="c0"><span>Chose a system that has a low barrier to entry, something people are keen to learn, or will already know:</span></p>
<p class="c1 c0"><span></span></p>
<ol class="c4" start="1">
	<li class="c2 c0"><span>One where there&#39;s value in learning, such as a popular industry standard, and those systems will be better documented, better understood, more reliable, and your colleagues will be easier to get on board.</span></li>
	<li class="c2 c0"><span>Use the system &quot;in-paradigm&quot;, by which I mean, use it as was meant to be used, not in an unusual &quot;out-of-paradigm&quot; way, this will make your colleagues life difficult, and prevent adoption.</span></li>
</ol>
<p class="c1 c0"><span></span></p>
<p class="c0"><span>Can you can test multiple configurations, where some tests are only applicable to some modules and configurations?</span></p>
<p class="c0 c1"><span></span></p>
<p class="c0"><span>Is it robust?</span></p>
<p class="c1 c0"><span></span></p>
<ol class="c4" start="1">
	<li class="c0 c2"><span>Will changes to test subjects lead easily to identifying the tests that need changing? A change to your underlying implementation shouldn&#39;t silently break the tests.</span></li>
	<li class="c2 c0"><span>Avoid completely dynamic languages, compile time checking prevents typographical errors and identifies tests that might need changing if the test subject changes.</span></li>
</ol>
<p class="c1 c0"><span></span></p>
<p class="c0"><span>Consider if the system is usable by both developers, and to less technical people - will you want testers or QA to be able to write tests?</span></p>
<p class="c1 c0"><span></span></p>
<p class="c0"><span>Once upon a time I thought this was a no brainer: is the test system fully automated? Or, is it going to cost your company money each time you run them?</span></p>
<p><a href="?q=content/testing-pt-1">&larr; Back to part 1</a> ~ <a href="?q=content/testing-pt-3-writing-tests">On to part 3 &rarr;</a></p>™1346016187€Testing - Pt 3 - Writing Tests€<p class="c3"><span>Tests should be fast to run and fast to write:</span></p>
<p class="c2"><span></span></p>
<ol class="c0" start="1">
	<li class="c1"><span>Writing tests should not require time-consuming set-up of databases, DLLs or environments, automate anything of this nature.</span></li>
	<li class="c1"><span>You should not require tacit knowledge of customised systems, no ones want to indulge in tedious manual set up. It&#39;s just cost.</span></li>
	<li class="c1"><span>Ask yourself - is running someone else&#39;s tests should be possible with a single button?</span></li>
	<li class="c1"><span>The tests themselves should not take long to write.</span></li>
</ol>
<p class="c2"><span></span></p>
<p class="c3"><span>Don&#39;t confuse tests for production code:</span></p>
<p class="c2"><span></span></p>
<ol class="c0" start="1">
	<li class="c1"><span>Don&#39;t worry too much about writing the most &quot;effective Java&quot; test code, or reuse. Fields don&#39;t need to be &quot;private final&quot;.</span></li>
	<li class="c1">You don't need to enforce you coding standards on tests.</li>
</ol>

<p>Test the behaviour, not the method (@Test void testMethodX anyone?):</p>

<ol>
	<li class="c1"><span>Consider a BDD based system.</span></li>
</ol>
<p class="c2"><span></span></p>
<p class="c3"><span>Consider writing test for interfaces, and then using a</span><span><a class="c5" href="https://blogs.oracle.com/jacobc/entry/parameterized_unit_tests_with_junit">&nbsp;</a></span><span class="c4"><a class="c5" href="https://blogs.oracle.com/jacobc/entry/parameterized_unit_tests_with_junit">parameterized</a></span><span>&nbsp;runner that will run the same set of tests for each implementation.</span></p>
<p class="c2"><span></span></p>
<p class="c3"><span>Test failure should clearly feedback into fixes:</span></p>
<p class="c2"><span></span></p>
<ol class="c0" start="1">
	<li class="c1"><span>Capture output from tests so failure can be diagnosed.</span></li>
	<li class="c1"><span>Make sure failed tests can be run in isolation from their suite, so you can focus on fixing failing tests.</span></li>
	<li class="c1"><span>How long is the mean time between test failure, fixing the faulty code and rerun of the test?</span></li>
</ol>
<p class="c2"><span></span></p>
<p><a href="?q=content/testing-pt-2-choosing-your-system">&larr; Back to part 2</a> ~ <a href="?q=content/testing-pt-4-test-support-and-test-doubles">On to part 4 &rarr;</a></p>™1346016474€Testing - Pt 4 - Test Support and Test Doubles€<p class="c1"><span>Document supporting code:</span></p>
<p class="c1 c4"><span></span></p>
<ol class="c3" start="1">
	<li class="c0"><span>Test doubles or fixtures won&#39;t be reused if people don&#39;t know about them or how.</span></li>
</ol>
<p class="c1 c4"><span></span></p>
<p class="c1"><span>With JUnit, consider using </span><span class="c5"><a class="c2" href="http://www.alexecollins.com/?q=content/tutorial-junit-rule">@Rules</a></span> to provide mixin-esq components for tests.</span></p>
<p class="c1 c4"><span></span></p>
<p class="c1"><span>Prefer fakes:</span></p>
<p class="c1 c4"><span></span></p>
<ol class="c3" start="1">
	<li class="c0"><span>They&#39;re generally more versatile and reusable than stubs, dummies or mocks.</span></li>
	<li class="c0"><span>They&#39;ll give you a better understanding of the subject than other types of doubles.</span></li>
	<li class="c0"><span>They can often share a code with the implementation, and thereby test that as well.</span></li>
	<li class="c0"><span>Have the ability to directly control fakes by an interface, e.g. to put components into error mode that cannot be stimulated by normal APIs, e.g. network issues or hardware failures.</span></li>
</ol>
<p>Fake the third-party:</p>
<ol>
	<li class="c0">In my job there&#39;s a fair amount of JNI/JNA code that talks to hardware. By faking just the JNI methods, we can simulate various things including timeouts of failures. I&#39;ve done similar things with faking serial devices, faking javax.comm.SerialPort and pre-loading it with fake data that simulates failures or other errors.</li>
	<li>This will work equally as well with RESTful APIs and the like.</li>
</ol>
<p class="c1 c4"><span></span></p>
<p><a href="?q=content/testing-pt-3-writing-tests">&larr; Back to part 3</a> ~ <a href="?q=content/testing-pt-5-running-tests">On to part 5 &rarr;</a></p>™1346016629€Testing - Pt 5 - Running Tests€<p class="c4"><span>Be &quot;realistic&quot;:</span></p>
<p class="c2"><span></span></p>
<ol class="c3" start="1">
	<li class="c1"><span>Prefer running tests on a representative set-up using real code rather than using fakes.</span></li>
	<li class="c1"><span>Try and run your tests out of container, so the software is run in as close to production set-up as possible.</span></li>
	<li class="c1"><span>If software runs on specific environment, run the tests there too, i.e. integration tests are preceded by a deployment (and implicit test thereof), this in turn implies that deployment should be a button press.</span></li>
</ol>
<p class="c2"><span></span></p>
<p class="c4"><span>Make then repeatable:</span></p>
<p class="c2"><span></span></p>
<ol class="c3" start="1">
	<li class="c1"><span>Tests written by one person can easily be accessed by another, i.e. version controlled.</span></li>
	<li class="c1"><span>No tedious, error prone work getting tests into version control, single button commit.</span></li>
	<li class="c1"><span>Can they run on computers other than your dev machine?</span></li>
	<li class="c1"><span>If it&#39;s not automated, it&#39;s not repeatable.</span></li>
</ol>
<p class="c2"><span></span></p>
<p class="c4"><span>Integrate with the build system:</span></p>
<p class="c2"><span></span></p>
<ol class="c3" start="1">
	<li class="c1"><span>You tests should run on your dev machine, and the CI server and in QA, each run will give you more confidence in the finished product.</span></li>
	<li class="c1"><span>They should run in CI, probably headless, alongside concurrent executions of the same tests. Do they use the same hardcoded directories; are they listening on the same ports?</span></li>
</ol>
<p class="c2"><span></span></p>
<p><a href="?q=content/testing-pt-4-test-support-and-test-doubles">&larr; Back to part 4</a></p>™1347361216€5 Tips for Unit Testing Threaded Code€<h1>5 Tips for Unit Testing Threaded Code</h1>

<p>Here's a few tips on how take make testing your code for logical correctness (as opposed to multi-threaded correctness).</p>

<p>I find that there are essentially two stereotypical patterns with threaded code:</p>

<ol>
<li>Task orientated -  many, short running, homogeneous tasks, often run within the Java 5 executor framework,</li>
<li>Process orientated - few, long running, heterogeneous tasks, often event based (waiting on notification), or polling (sleeping between cycles), often expressed using a thread or runnable.</li>
</ol>

<p>Testing either type of code can be hard; the work is done in another thread, and therefore notification of completion can be opaque, or is hidden behind a level of abstraction.</p>

<p>The code is <a href="https://github.com/alexec/threaded-code-testing">On GitHub</a>.</p>

<h2>Tip 1 - Life-cycle Manage Your Objects</h2>

<p>Object that have a managed life-cycle are are easier to test, the life-cycle allows for set-up and tear-down, which means you can clean-up after your test and no spurious threads are lying around to pollute other tests.</p>

<pre><code>public class Foo {
    private ExecutorService executorService;

    public void start() {
        executorService = Executors.newSingleThreadExecutor();
    }

    public void stop() {
        executorService.shutdown();
    }
}
</code></pre>

<h2>Tip 2 - Set a Timeout on Your Tests</h2>

<p>Bugs in code (as you'll see below) can result in a multi-threaded test never completing, as (for example) you're waiting on some flag that never gets set. JUnit lets you set a timeout on your test.</p>

<pre><code>...
@Test(timeout = 100) // in case we never get a notification
public void testGivenNewFooWhenIncrThenGetOne() throws Exception {
...
</code></pre>

<h2>Tip 3 - Run Tasks in the Same Thread as Your Test</h2>

<p>Typically you'll have an object that runs tasks in a thread pool. This means that your unit test might have to wait for the task to complete, but you're not able to know when it would complete. You might guess, for example:</p>

<pre><code>public class Foo {
    private final AtomicLong foo = new AtomicLong();
...
    public void incr() {
        executorService.submit(new Runnable() {
            @Override
            public void run() {
                foo.incrementAndGet();
            }
        });
    }
...
    public long get() {
        return foo.get();
    }
}
</code></pre>

<p>Consider this test:</p>

<pre><code>public class FooTest {

    private Foo sut; // system under test

    @Before
    public void setUp() throws Exception {
        sut = new Foo();
        sut.start();
    }

    @After
    public void tearDown() throws Exception {
        sut.stop();
    }

    @Test
    public void testGivenFooWhenIncrementGetOne() throws Exception {
        sut.incr();
        Thread.sleep(1000); // yuk - a slow test - don't do this
        assertEquals("foo", 1, sut.get());
    }
}
</code></pre>

<p>But this is problematic. Execution is non-uniform so there's no guarantee that this will work on another machine. It's fragile, changes to the code can cause the test to fail as it suddenly take a bit too long. Its slow, as you will be generous with sleep when it fails.</p>

<p>A trick is to make the task run synchronously, i.e. in the same thread as the test. Here this can be achieved by injecting the executor:</p>

<pre><code>public class Foo {
...
    public Foo(ExecutorService executorService) {
        this.executorService = executorService;
    }
...
    public void stop() {
        // nop
    }
</code></pre>

<p>Then you can have use a synchronous executor service (similar in concept to a SynchronousQueue) to test:</p>

<pre><code>public class SynchronousExecutorService extends AbstractExecutorService {
    private boolean shutdown;

    @Override
    public void shutdown() {shutdown = true;}

    @Override
    public List&amp;lt;Runnable&amp;gt; shutdownNow() {shutdown = true; return Collections.emptyList();}

    @Override
    public boolean isShutdown() {shutdown = true; return shutdown;}

    @Override
    public boolean isTerminated() {return shutdown;}

    @Override
    public boolean awaitTermination(final long timeout, final TimeUnit unit) {return true;}

    @Override
    public void execute(final Runnable command) {command.run();}
}
</code></pre>

<p>An updated test that doesn't need to sleep:</p>

<pre><code>public class FooTest {

    private Foo sut; // system under test
    private ExecutorService executorService;

    @Before
    public void setUp() throws Exception {
        executorService = new SynchronousExecutorService();
        sut = new Foo(executorService);
        sut.start();
    }

    @After
    public void tearDown() throws Exception {
        sut.stop();
        executorService.shutdown();
    }

    @Test
    public void testGivenFooWhenIncrementGetOne() throws Exception {
        sut.incr();
        assertEquals("foo", 1, sut.get());
    }
}
</code></pre>

<p>Note that you need to life-cycle manage the executor externally to Foo.</p>

<h2>Tip 4 - Extract the Work from the Threading</h2>

<p>If your thread is waiting for an event, or a time before it does any work, extract the work to its own method and call it directly. Consider this:</p>

<pre><code>public class FooThread extends Thread {
    private final Object ready = new Object();
    private volatile boolean cancelled;
    private final AtomicLong foo = new AtomicLong();

    @Override
    public void run() {
        try {
            synchronized (ready) {
                while (!cancelled) {
                    ready.wait();
                    foo.incrementAndGet();
                }
            }
        } catch (InterruptedException e) {
            e.printStackTrace(); // bad practise generally, but good enough for this example
        }
    }

    public void incr() {
        synchronized (ready) {
            ready.notifyAll();
        }
    }

    public long get() {
        return foo.get();
    }

    public void cancel() throws InterruptedException {
        cancelled = true;
        synchronized (ready) {
            ready.notifyAll();
        }
    }
}
</code></pre>

<p>And this test:</p>

<pre><code>public class FooThreadTest {

    private FooThread sut;

    @Before
    public void setUp() throws Exception {
        sut = new FooThread();
        sut.start();
        Thread.sleep(1000); // yuk
        assertEquals("thread state", Thread.State.WAITING, sut.getState());
    }

    @After
    public void tearDown() throws Exception {
        sut.cancel();
    }

    @After
    public void tearDown() throws Exception {
        sut.cancel();
    }

    @Test
    public void testGivenNewFooWhenIncrThenGetOne() throws Exception {
        sut.incr();
        Thread.sleep(1000); // yuk
        assertEquals("foo", 1, sut.get());
    }
}
</code></pre>

<p>Now extract the work:</p>

<pre><code>@Override
public void run() {
    try {
        synchronized (ready) {
            while (!cancelled) {
                ready.wait();
                undertakeWork();
            }
        }
    } catch (InterruptedException e) {
        e.printStackTrace(); // bad practise generally, but good enough for this example
    }
}

void undertakeWork() {
    foo.incrementAndGet();
}
</code></pre>

<p>Re-factor the test:</p>

<pre><code>public class FooThreadTest {

    private FooThread sut;

    @Before
    public void setUp() throws Exception {
        sut = new FooThread();
    }

    @Test
    public void testGivenNewFooWhenIncrThenGetOne() throws Exception {
        sut.incr();
        sut.undertakeWork();
        assertEquals("foo", 1, sut.get());
    }
}
</code></pre>

<h2>Tip 5 - Notify State Change via Events</h2>

<p>An alternative to the previous two tips is to use a notification system, so your test can listen to the threaded object.</p>

<p>Here's a task oriented example:</p>

<pre><code>public class ObservableFoo extends Observable {
    private final AtomicLong foo = new AtomicLong();
    private ExecutorService executorService;

    public void start() {
        executorService = Executors.newSingleThreadExecutor();
    }

    public void stop() {
        executorService.shutdown();
    }

    public void incr() {
        executorService.submit(new Runnable() {
            @Override
            public void run() {
                foo.incrementAndGet();
                setChanged();
                notifyObservers(); // lazy use of observable
            }
        });
    }

    public long get() {
        return foo.get();
    }
}
</code></pre>

<p>And its corresponding test (note the use of timeout):</p>

<pre><code>public class ObservableFooTest implements Observer {

    private ObservableFoo sut;
    private CountDownLatch updateLatch; // used to react to event

    @Before
    public void setUp() throws Exception {
        updateLatch = new CountDownLatch(1);
        sut = new ObservableFoo();
        sut.addObserver(this);
        sut.start();
    }

    @Override
    public void update(final Observable o, final Object arg) {
        assert o == sut;
        updateLatch.countDown();
    }

    @After
    public void tearDown() throws Exception {
        sut.deleteObserver(this);
        sut.stop();
    }

    @Test(timeout = 100) // in case we never get a notification
    public void testGivenNewFooWhenIncrThenGetOne() throws Exception {
        sut.incr();
        updateLatch.await();
        assertEquals("foo", 1, sut.get());
    }
}
</code></pre>

<p>This has pros and cons:</p>

<p>Pros:</p>

<ol>
<li>Creates useful code for listening to the object.</li>
<li>Can take advantage of existing notification code, which makes it a good choice where that already exists.</li>
<li>Is more flexible, can apply to both tasks and process orientated code.</li>
<li>It is more cohesive than extracting the work.</li>
</ol>

<p>Cons:</p>

<ol>
<li>Listener code can be complex and introduce its own problems, creating additional production code that ought to be tested.</li>
<li>De-couples submission from notification.</li>
<li>Requires you to deal with the scenario that no notification is sent (e.g. due to bug).</li>
<li>Test code can be quite verbose and therefore prone to having bugs.</li>
</ol>
™1347953587€An unambiguous software version scheme€When people talk about software versioning schemes they often refer to the commonly used  X.Y.Z numerical scheme for versioning. This is often referred to major.minor.build, but these abstract terms are not useful as they don't explicitly impart any meaning to each numerical component. This can lead to the simplest usage, we just increment the last number for each release, so I've seen versions such as 1.0.35. Alternatively, versions become a time consuming point of debate. This is a shame as we could impart some clear and useful information with versions.

I'm going  to suggest that rather than thinking "X.Y.Z" we think "api.feature.bug". What do I mean by this? You increment the appropriate number for what your release contains. For example, if you have only fixed bugs, you increment the last number. If you introduce even one new feature, then you increment the middle number. If you change a published or documented API, be that the interface of a package, a SOAP or other XML API, or possibly the user interface (in a loose sense of the term "API") then the first number. 

This system is unambiguous, no need for discussions about the numbering.

You zero digits to the right of any you increment, so if you fix a bug and introduce a new feature after version 5.3.6 then the new version is 5.4.0. Unstated digits are assumed to be zero, so 5.4.0 is the same as 5.4.0.0 and 5.4.0.0.0.0.0.0.0...

The version is not a number, and it does not have digits. The version 5.261.67 is pretty unusual, but not invalid. Don't let it put you off.

You might need to change an API due to bug fix, but you'll need to be diligent, and cold to any politicking by increasing the API digit. Otherwise the scheme looses value and you might as well just use a single number for versioning.

What if you're on version 5 of the product and the product lead has told everyone version 6 will be something special, but you need to fix a bug that means an API change? You need a hybrid version system, which consists of the external "product version" and the internal "software version". 

What about branching for production support? Technically no features, but quite possibly one branch per customer. CVS has a suitable system, take the version of the release, append two digits, the first to indicate the branch, the second for the fix number. For example, if you branch from 5.4.0 then the first release will be 5.4.1.0, the next branch's second release would be 5.4.2.1.
™1349011779€Opinion: Performance Testing€<h2>Overview</h2>

<p>Performance tuning an application is time consuming, and expensive. Useful tests often need dedicated hardware to run on. It's specialised and time consuming to prepare the ground work and write the various fixtures needed to run, and whose only perceived benefit is preventing a production issue that you don't even know will happen yet.</p>

<h2>Stereotypical Scenarios and Outcomes</h2>

<p>Here's some stereotypes I've encountered:</p>

<ul>
<li>A feature release contains a new feature that wasn't (or even could not have been) tested adequately that has a major performance issue from the outset.</li>
<li>A change to existing code, perhaps to finesse or refine an existing feature, perhaps a change that's not been requested by the customer, introduces a catastrophic performance issue.</li>
<li>A sleeper: a change in the system that only occurs after some time (e.g. running out of values in a 4-byte integer serial column, meaning that inserts into that table require the database engine to scan for unused keys).</li>
<li>Change of use: it was designed to be used in one way, and then the customer starts using it in another unanticipated way.</li>
<li>Age: the database gets large and queries start to slow down, I've heard this referred to is somewhat wooly terms as "degradation".</li>
</ul>

<p>A common resolution to these stereotypes is a herculean effort: late night and weekends with people on the phone asking "When will my site be fixed? Who's responsible for this?". I've heard this called "hero culture". It's a mentality that can perversely reward those who might have been expected to prevent the problem, as they are the ones best capable of fixing it.</p>

<p>After resolution, a period of self-reflection. People are asking what can be done to show willingness to tackle the problem; perhaps in a one-off performance tuning exercise by a specialist, which resolves current issues. But, if the analysis is done by a seconded specialist who's not part of the team, it's an exercise whose lessons are not disseminated, and which is not repeatable. Those who do not learn from the past are doomed to repeat it<a href="http://en.wikiquote.org/wiki/George_Santayana">*</a>.</p>

<p>This might be a fait-accompli: if performance testing is more expensive than the cost of fixing periodic production issues, then this is the most logical, most cost-effective approach.</pP

<p>Many systems, perhaps due to cost or lack of time, have not been developed in a way that is amenable to automated testing. After all, when a system is first written, you might not know if it's going to be a commercial success, so why spend money making system maintainable if it might never need to be maintained?</p>

<p>The inability to test the performance of changes can mean that improvements to the system are prevented; the cost of introducing a bug cannot be mitigated. People start to fear change and the product stagnates. A younger, faster, competitor learns from your success. They quickly write a more modern, cheaper version of your software and starts taking your business.</p>

<h2>Automated Performance Testing</h2>

<p>How do you implement this? How do you take a system that might even be hostile to testing, and change it so that releases become more bug free and robust?</p>

<h3>Foundations</h3>

<p>You should make sure your code base is reliable before you consider performance testing. Most of this is common sense.</p>

<ol>
<li>Change and test incrementally.</li>
<li>Bugs first, features second; new features will only introduce new bugs, so make sure you fix any bugs first.</li>
<li>Use a mature developed build system.</li>
<li>Be able to write and execute unit tests on your code.</li>
</ol>

<p>Once these are in place, consider using code quality tools, such as <a href="http://findbugs.sourceforge.net"FindBugs</a> or <a href="http://cobertura.sourceforge.net">Cobertura</a>, to get metrics and enforce them, failing builds that don't meet some minimum criteria.</p>

<h2>Integration Test</h2>

<p>Integration test forms the first step toward full performance testing. There's many frameworks, depending on how users or clients interface. If it is a web-app, then you might use <a href="http://seleniumhq.org">Selenium</a>, a web service, a ReST or SOAP client. Generally, a popular framework is a better choice, as it encourages adoption by the rest of your team. Ask yourself - would I rather learn something well-documented, interesting and personally valuable, or wrestle with someone else's hand-rolled vanity project? Regardless, to run integration tests, you'll need to be able to:</p>

<ol>
<li>Build your app.</il>
<li>Deploy to a test environment.</li>
<li>Execute the tests.</li>
<li>Report the results.</li>
</ol>

<p>Ideally, you should be able to do this at the touch of a button, otherwise you'll be the only person who does it, and you'll lose a lot of the value of your work.</p>

<p>As you do this you'll find that:</p>

<ol>
<li>You better understand the architecture of your app.</li>
<li>You know how to create a suitable environment for it.</li>
<li>You understand the deployment process.</li>
<li>You can deploy it automatically.</li>
</ol>

<p>These are key to automating performance testing.</p>

<h3>Performance Testing</h3>

<p>Unit testing, and to some degree integration testing, have binary outcomes: they pass and everyone's happy, they fail, and there's a bug to be fixed. To a similar degree, the tools are well supported and everyone knows how to use them. Performance testing is a bit more of an art. Ultimately a performance test produces some measures: a series of numbers, but are those numbers good or bad? Do you want to guess? A single metric, standing on it's own, can be un-enlightening, but you can look at its relative change to previous measurement. You need to (in order):</p>

<ol>
<li><b>Expose</b> metrics (noting that you may want to introduce new ones and deprecate old ones).</li>
<li><b>Sample</b> the metrics.</li>
<li><b>Run</b> the same test from the same baseline (e.g. by starting with a freshly provisioned server, loading it with data, and warming it up).</li>
<li><b>Report</b> on the results within a tool.</li>
</ol>

<p>Again, with a single button press.</p>

<p>If you deploy your app to one host, where do you run the tests from? What demand might they make of the office network? Do you need multiple hosts and their own LAN?</p>

<p>You'll need to expose your metrics first, and there are a few commercial and open source tools for Java, such as <a href="http://www.jinspired.com">JInspired</a> or <a href="http://metrics.codahale.com">Metrics</a>, or, indeed you can roll your own. One feature you might want is exposing the metrics over JMX, which allow sampling. <a href="http://www.opennms.org">OpenNMS</a> is a network management application that can remotely periodically sample JMX beans, and it is relatively straight forward to get graphs of those metrics. There are, of course, alternatives.</p>

<p>Now, if you automatically deploy then performance test on each commit, then you could have the details displayed on your agile wall, so the team can see when performance changes and any hot spots appear. Best of all, once it's all in place, you don't need to do much to keep it up to date.</p>
™1349600509€Swing Utils€<p>
    I've been doing a lot of Swing lately (don't laugh, it's still a <a href="http://zeroturnaround.com/labs/developer-productivity-report-2012-java-tools-tech-devs-and-data/">big deal</a>). There one or two basic things that are missing, so I've knocked together some lightweight implementations with no licensing.
</p>
<ul>
    <li><b>FormLayout</b> lays out components in the same fashion as a web-form.</li>
    <li><b>FormPanel</b> is a panel that lays out its contents like a web-form.</li>
    <li><b>ProgressPanel</b> is a panel version of ProgressMonitor, so you can embed it somewhere else.</li>
    <li><b>WizardPanel</b> is a basic version of a wizard that allows you to add multiple pages and deals with navigation.</li>
</ul>
<p>They're usable but a bit primitive. For example, you can't change the order of pages in the wizard, and the form layout doesn't do any wrapping components. The class ExampleWizardPanel showcases them. You may wish to consider JGoodies FormLayout in preference to this.</p>
<p>The code is <a href="https://github.com/alexec/swing-utils">on Github</a>.</p>
™1349613949€JavaHelp Skeleton Maven Project€<p>
I couldn't seem to find one, and the only Maven JavaHelp plugins I could find seemed to be dead.
</p>
<p><a href="https://github.com/alexec/javahelp-skeleton">On GitHub</a>.</p>™1350036825€Opinion: Terse Coding Naming Conventions€When writing code, you might experience the feeling that you should make all your names very descriptive, and long. But is this necessary? 

<em>"A name is too long when a shorter name exists that equally conveys the name's meaning and implication."</em> 

Long names take up screen real-estate, meaning that less code appears on screen, making it slower to work with and people more prone to mistakes, esp. in dynamic languages. Ultimately, long names create additional cost, and additional bugs.

<em>1. Use common abbreviations.</em>

This pretty much covers all common abbreviations in the English dictionary, e.g.:

abbreviation &rarr; abbr
page &rarr; pg

Common programming terms, e.g.:

directory &rarr; dir
configuration &rarr; config &rarr; conf &rarr; cfg
automatic &rarr; auto
error &rarr; err
exception &rarr; ex
event &rarr; evt
list &rarr; ls
copy &rarr; cp
x-axis &rarr; x
amount &rarr; amt (other transactional ones include, transaction &rarr; tx, debit &rarr; dbt)
synchronous &rarr; sync
customer &rarr; cust (there's many customer related ones, e.g. uname, passwd, fname, addr)
context &rarr; ctx

<em>2. Don't use a common prefix</em>

Have you ever seen classes where all fields start with "my" or all private fields with "_"?

<ol>
<li>Every reference to these fields takes maybe 20% longer to type.</li>
<li>IDE auto-completion is hobbled, making typing those field much, much slower.</li>
</ol>

<em>3. Consider using the shortest sane abbreviation within the scope</em>

Think of this as the flip-side of the "long-lived variable should have descriptive names". Short-lived variable's meaning can be taken from their context and therefore don't need long names. You might even wish to just use single letters.

<em>4. Consider using domain specific abbrs.</em>

In e-gaming this might include:

account &rarr; acct
report &rarr; rpt
event selection &rarr; seln
table &rarr; tbl

Consider having an easy to find list of common ones (e.g. in your new starter welcome pack).

<em>5. But... don't make them up.</em>

If you start inventing abbreviations, then that means that other people will either have to ask you what they mean, or invent their own interpretations and usually misunderstand your names. If a name means different things to people in the same content, you can expect it to cause problems - by which I mean bugs.™1350681963€CD Slideshow€Great slideshow on using Jenkins to create a complete CD pipeline:

http://weblogs.java.net/blog/johnsmart/archive/2012/10/18/combining-continuous-delivery-practices-maven-and-jenkins™1351004286€Creating a File Share Artifact Repository €When you need to have file kept on file share used in your build, but they're not suitable to deploy into your repo, you can get some of the benefits of having artifacts in a repo (e.g. sharing and versions) by creating a disk based repo on an office file share. This is handy for some edge cases, for example when you might have very large artifacts (e.g. CD images) that are too large for your artifactory, but could be stored on a file share disk.

Firstly, create somewhere shared for the repo it to live:

<pre>\\\\fileshare\\my-repo</pre>

You need to create the artifact, e.g. a zip file. I'm using the dependency plugin to get artifacts for my build. I haven't released the artifact yet, but I've chosen a group ID etc and put it in a place ready for the assembly plugin to, well, assemble it:

<code type="xml">
<plugin>                        
	<artifactId>maven-dependency-plugin</artifactId>
	<version>2.5.1</version>                        
	<executions>                           
		<execution>
			<phase>package</phase>
			<goals><goal>unpack</goal></goals>
			<configuration>
				<artifactItems>
					<artifactItem>
						<groupId>com.alexecollins</groupId>                      
						<artifactId>big-zip-file</artifactId>
						<version>1</version>
						<type>zip</type>
						<outputDirectory>${project.build.directory}/assembly/default</outputDirectory>    
					</artifactItem>
					...
</code>

And to indicate where to get this from, I've added the disk repo to my POM:

<code type="xml">
    <repositories>
        <repository>
            <id>my-repo</id>
            <url>file://fileshare/my-repo</url>
        </repository>
    </repositories>
</code>

When you now do a "mvn package" it'll complain:

<pre>
[ERROR] Try downloading the file manually from the project website.
[ERROR]
[ERROR] Then, install it using the command:
[ERROR] mvn install:install-file -DgroupId=com.alexecollins -DartifactId=my-big-file -Dversion=1 -Dpackaging=zip -Dfile=/path/to/file
[ERROR]
[ERROR] Alternatively, if you host your own repository you can deploy the file there:
[ERROR] mvn deploy:deploy-file -DgroupId=com.alexecollins -DartifactId=my-big-file -Dversion=1 -Dpackaging=zip -Dfile=/path/to/file -Durl=[url] -DrepositoryId=[id]
</pre>

You'd think you could then do this:

<pre>
mvn deploy:deploy-file -DgroupId=com.alexecollins -DartifactId=my-big-file -Dversion=1 -Dpackaging=zip -Dfile=my-big-file.zip -Durl=file://fileshare/my-repo
</pre>

But this doesn't work, and fails silently. Instead, we can get Maven to create the directory structure and meta-data (i.e. POM) by first locally installing it:

<pre>
mvn install:install-file -DgroupId=com.alexecollins -DartifactId=my-big-file -Dversion=1 -Dpackaging=zip -Dfile=my-big-file.zip
</pre>

Move the directory it creates in your local repository  (i.e. in ~/.m2/repository/com/alexecollis/my-big-file/1/my-big-file-1.zip)to your new file share repo (you'll need the keep the full path, e.g. //fileshare/my-repo/com/alexecollins/my-big-file/1/my-big-file-1.zip), delete any file that's not a *.pom or an artifact. 

Finally, you'll need a checksum (I'm using Cygwin):

<pre>
md5sum my-big-file-1.zip | awk '{print $1}' > my-big-file-1.zip.iso.md5
</pre>

You will now be able to use that directory as a repo. Try running "mvn package" again - and see it download the artifact.

If you're using a mirror, and you've stated that it mirrors everything by having <mirrorOf>*</mirrorOf> in your Maven settings.xml, then Maven will assume it can also mirror your file share repo. You'll have to change your settings to state that this repo is not included.

Finally, you might want to consider:-

<ol>
<li>How it the repository is backed up?</li>
<li>How secure is it?</li>
<li>How easy would it be to corrupt it?</li>
<ol>

You'll probably only want to use this when you'd have previously kept the files on a file share and used Ant to copy them over.™1351613335€Maven VBox Plugin€I've written an API, Maven mojos and Ant task for creating, provisioning, starting, and stopping Oracle Virtual Boxes. It's somewhat similar to Vagrant or VeeWee and can be found on Github:

https://github.com/alexec/maven-vbox-plugin™1351613450€Maven VBox Plugin€I'm pretty excited about a new project I've been putting a few hours into, a Maven plugin to create and provision VirtualBoxes.

Early code here:

https://github.com/alexec/maven-vbox-plugin™1354882709€Tips for Writing Maven Plugins€I've spent a lot of time recently writing or working on plugins for Maven recently. They're simple, rewarding and fun to write. I thought I'd share a couple of tips for making life easier when writing them.

Tip 1: Separate the Task from the Mojo

Initially you'll put all the code for the mojo into the mojo's class (i.e. the class that extends AbstractMojo). Instead think about separating the task out and having minimal shim code for the mojo. This will:

- Make it easier to unit test.
- Mean you can easily integrate with other tools, such as Ant.
- Make it easier to convert the simple data types in the mojo so more complex types for your task (e.g. turn a String into a File).
- Separate exception translation from the task.

Tip 2: Consider Externalizing Configuration

Normally you configure a plugin using the <configuration/> element in the POM. This is fine for simple cases. When you have a large sets of configuration items, or where you might have several configuration profiles, this will result in long, hard to understand POMs. You can follow the assembly plugin's example,  have a standardised directory for putting config in, e.g. src/main/myplugin/config-profile-1.xml.

Tip 3: Match the Mojo to the Phase

Consider which phase you might want the mojo to run in. If it is doing things that ought to split accross phases, then split the mojo up and bind to the appropriate phase. It'll make it easier to test and to maintain.

Tip 4: Don't Repeat Time Consuming Work

Your mojo will get run multiple times on small variations of the same source code and config. Does it do a lot of intensive work every execution? I was working with a Mojo that unzipped a file every time it ran, by changing the zip code to only freshen files by checking file modification times, the task went from taking over a minute to execute to less than 10 seconds. 

Tip 5: Plan Your Testing

Initially you're probably writing your mojo and manually testing on the first project you're going to use it on. This will be a long testing cycle, and result in an unreliable mojo. Separating the task from the mojo makes testing the task easy, but you'll want to have some smoke tests for the mojo. Bugs in mojos can be hard for users to notice as there's a tendency to assume most mojos are well tested and reliable.

Tip 6: Consider how you Provide Documentation and Help for your Mojo

IDEs and Maven can be a bit unhelpful here. What does that config item mean? Can I see an example? The solution is to provide a "help" mojo and optionally a Maven site. For example, if you execute "mvn assembly:help" or "mvn surefire:help -Ddetail=true -Dgoal=test" you'll see help.

™1357425830€Micro Services€I've just watch <a href="http://www.infoq.com/presentations/Micro-Services">a really good InfoQ video from James Lewis at Thoughtworks</a>. As you might expect from Thoughtworks, it has some stuff about CD, but also some great ideas an building large systems from small, somewhat independent components.

As a brain dump:

- Break complex systems into manageable, independent parts.
- Use HTTP and REST for services (no ESB). 
- Don't worry too much about reuse. It's a double-edged sword. 
- Standard media types, ones that can be consumed both by machines and peoples are great for testing.
- Conway's Law: arrange your teams to reflect your system's topology.
- Each team can use the best tech is best suited to their system.
- Not for the first time I've heard someone say, use lightweight embedded HTTP server rather than a heavy weight container.™1357859854€Code Review Best Practises€Good and detailed post:

http://insidecoding.wordpress.com/2013/01/07/code-review-guidelines/™1358288389€Fun with Maven and VirtualBox€<p><a href="http://www.youtube.com/watch?v=Y4ZXD7psIuM">Here's a five minute video</a> demonstrating how some fun features of my Maven VirtualBox plugin, such as creating a box from some configuration, provisioning it and running integration tests against it.</p>

<p>The code can be <a href="https://github.com/alexec/maven-vbox-plugin-example">found on GitHub</a>.</p>™1358588588€Four Easy Steps to Providing Help for your Maven Plugin€<p>This is easy, it is supported out of the box.</p>

<p>Step 1 - make sure each mojo has the JavaDoc, this will be used to generate your help files. E.g.:</p>

<code type="java">
/**
 * Create and provision each of the boxes defined in src/main/vbox.
 *
 * @goal provision
 * @phase pre-integration-test
 */
public class ProvisionMojo extends AbstractVBoxesMojo {

	/**
	 * Which targets in the Provision.xml to execute, or all if "*".
	 *
	 * @parameter expression="${vbox.provision.targets}", default="*"
	 */
	protected String targets = "*";
</code>

<p>Step 2 - add the "helpmojo" goal to your plugin.</p>

<code type="xml">
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-plugin-plugin</artifactId>
                <version>3.2</version>
                <executions>
                    <execution>
                        <id>generated-helpmojo</id>
                        <goals>
                            <goal>helpmojo</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
</code>

<p>Step 3 - execute "mvn install".</p>
<p>Step 4 - test by executing "mvn vbox:help" (substitute your own plugin's name), you'll see something like this.</p>

<pre>
...

A Maven plugin for creating, starting, and stopping VirtualBoxes.

This plugin has 8 goals:

...

vbox:help
  Display help information on vbox-maven-plugin.
  Call mvn vbox:help -Ddetail=true -Dgoal=<goal-name> to display parameter
  details.

...

vbox:provision
  Create and provision each of the boxes defined.
...
</pre>

<p>An example of the usage can be <a href="https://github.com/alexec/maven-vbox-plugin/tree/master/vbox-maven-plugin">found on GitHub</a>. And I've written <a href="http://www.alexecollins.com/?q=content/tips-writing-maven-plugins">tips on writing Maven plugins before</a>.</p>™1359199608€VirtualBox Java API v1 Released, v2 Roadmap €<p>I've decided today that I'm not going to pack any more features into v1. It's got everything I want at the moment and I'm not finding any more bugs.</p>

<p>Just a quick overview of the features of v1:</p>

<ul>
<li>The ability to create VirtualBoxes from templates.</li>
<li>Provision those boxes with software.</li>
<li>Integration with Ant and Maven.</li>
</ul>

<p>Version 1 can be <a href="https://github.com/alexec/maven-vbox-plugin/tree/1.0.0">found on GitHub</a> as can <a href="http://alexec.github.com/maven-vbox-plugin">the documentation</a>.</p>

<h2>V2 Roadmap</h2>

<p>In v2 I'm planning on two neat new features, patches and estates. You can <a href="https://github.com/alexec/maven-vbox-plugin/issues?milestone=2">track the tickets on GitHub</a>. As this is version 2, you can expect some API breaking changes :)</p>

<h3>Patches</h3>

<p>The ability to take a template and apply parameterised patches to it to produce a box, or several similar boxes Potentially this will make it much easier to create boxes from templates and greatly simplify the process. For example:</p>

<code type="xml">
<Profile template="CentOS_6_3">
<Patch name="Hostname" args="hostname=app1"/>
<Patch name="Tomcat6"/>
</Profile>
</code>

Or

<code type="xml">
<Profile template="CentOS_6_3">
<Patch name="Hostname" args="hostname=app1"/>
<Patch>
--- a/floppy0/post-install.sh
+++ b/floppy0/post-install.sh
@@ -7,8 +7,4 @@ mount /dev/sr0 /media/cdrom
 /media/cdrom/VBoxLinuxAdditions.run
 umount /dev/sr0
 rm -R /media/cdrom
-
-yum -y install tomcat6
-chkconfig tomcat6 on
-
 poweroff now
</Patch>
</Profile>
</code>

<p>This will allow you to upgrade your OS, and potentially use the same patches (at least by name) to get the same outcome.</p>

<h3>Estates</h3>

<p>Currently you can only create single box at a time, or a several, effectively independent boxes. This change will create a group of machines into a single environment (or estate) and a single click, and low configuring and management of boxes as a group.<p>™1359999200€Reverse a Java ZIP into Maven Project€1. Unzip the jars 
<code>
unzip app.zip -d dist
mkdir classes
find dist -name '*.jar' -exec unzip -B {} -d classes ';'
</code>
2. Download JAD and add to you PATH.
3. Decompile classes
<code>
mkdir -p src/main/java
cd classes
find . -name '*.class' | while read F ; do D=../src/main/java/$(dirname $F); mkdir -p $D ; jad -o -s java -d $D $F ; done
cd ..
</code>
4. Get resources:
<code>
mkdir -p src/main/resources
cd classes
find . -type f ! -name '*.class' | while read F ; do D=../src/main/resources/$(dirname $F); mkdir -p $D ; cp -v $F $D ; done
cd ..
</code>
5. Create a nominal POM:
<code>
echo '<project><modelVersion>4.0.0</modelVersion><groupId>com</groupId><artifactId>app</artifactId> <version>1</version></project>' > pom.xml
</code>
6. Compile!
<code>
mvn compile
</code>

Notes:

- If you multiple files with the same name, you'll get multiple copies with a number suffix, e.g. MANIFEST.MF~1.
- JAD can't always decompile files.™1360422136€Tech Radar€Just been reading Thoughworks tech radar from last October. Some interesting things in there:

- Log as data
- Vert.x - a great looking small web server
- Raik and Datomic data stores

http://www.thoughtworks.com/articles/technology-radar-october-2012™1361059112€Script Plugin for Maven€A quick plugin for Maven using Apache BSF to execute scripts:

https://github.com/alexec/script-maven-plugin™1361617269€Script Plugin for Maven now in Maven Central€I've put my <a href="https://github.com/alexec/script-maven-plugin">script plugin for Maven</a> into Maven central, so you can use it in any project.

The plugin executes scripts in any one of several languages (e.g. Groovy or BeanShell) as part of your build.™1361646185€VirtualBox Java API v2 Released, v3 Roadmap €I've release v2 today. Details can be found of the issues <a href="https://github.com/alexec/maven-vbox-plugin/issues?milestone=2&state=closed">on Github</a>. The top issues are:

<ul>
<li>Support for patches</li>
<li>Better support for 64bit hosts</li>
<li>Example projects for Ant and Maven</li>
</ul>

The roadmap for v3 will focus on performance:

<ul>
<li>Use a single global caching and snapshotting system for much faster start-up.</li>
<li>Gradle examples.</li>
</ul>™1364568610€Getting Alex's Things Done€<p>I've been finessing the way that I deal with tasks over the last few years, having tried GTD and found that it needed some tweaks. I think this is normal, any methodology might need changing to adapt to different people and roles. Specifically:

<ul><li>All work comes in via my email inbox, or verbally.
<li>I manage a team, so sometimes I need to be aware of what they're working on.
<li>I need to check for new email about once an hour in case of urgent emails (I can't just read it once a day).</ul>

<p>I use two tools, for this: email app and reminder app. The reminder app takes all tasks that aren't related to email. As for email, I use a very similar technique for my inbox as GTD, I used the "two minute rule" initially, and put each emails into a suitable folder:

<ul><li>Inbox - unread emails need action today.
<li>Archive - no action necessary
<li>Tomorrow - follow up the email tomorrow. I check this folder each morning before the stand-up.
<li>Next Week - similarly, but I check this on Monday morning.
<li>Next Month - I find this more useful for personal emails (e.g. check that bill); similar to "next week" but on the first day (or in the case of personal email, first Sunday night) of the next month
<li>Useful/Reference - the few very useful emails with useful links or information (e.g. passwords, flight details, etc.) I wouldn't want faf about searching for.</ul>

<p>What I don't have:

<ul><li>Next action - these all live in the inbox so they don't lose focus (it's also an overhead)
<li>Later/Someday - in found these were both became synonymous with "never" so these are replaced by the tomorrow/next week etc.
<li>Waiting On - these tend to need to be chased, so they go in "tomorrow"</ul>

<p>Hope these thought help you finesse your process.
™1369481863€AspectJ Maven Tempate€I've been pretty busy with a new job recently. I've not been able to find a complete Maven+AspectJ template on the Internet, I though I'd quickly knock one up and pop it on Github.
<!--break-->
It contains:

<ul>
<li>pom.xml with necessary dependencies and plugins</li>
<li>an aspect</li>
<li>a class that aspect advises</li>
<li>a test to ensure the aspect is correctly applied</li>
</ul>

https://github.com/alexec/aspectj-example

Enjoy.™1371313420€Team Dashboard with Dashing€<p>I've been setting up a dashboard for my team to display metrics. After looking around at the various options (and having an abortive stab at writing a framework myself) I found and OSS version called
<a href="http://shopify.github.io/dashing/">Dashing written by Shopify</a> that suited the needs.</p>

<p>There's a <a href="http://www.youtube.com/watch?v=TbGbm1cE6M0">nice example on YouTube</a> which I think gives a better feel than the built in samples.</p>

<p>I thought I'd put a few hints and tips after what I've learnt.</p>

<p>Why do you want a team dashboard? A dashboard can provide an overview of the team's status, and highlight actions that need to be taken. The ones we've got include:</p>

<p>Actionable tiles:</p>

<ul>
<li>Build status. Which builds (of the 41 builds) that are broken, and who the CI thinks broken them. This goes red if builds are broken and indicates who needs to fix the build.</li>
<li>Failing tests. Again, which tests are failing and who the CI thinks broke them. Since the test's package can indicate which feature needs fixing, this also indicates who might want to take a look.</li>
<li>Recorded time. Who has not recorded their time in the timesheet system.</span></li></li>
<li>New tickets. Untriaged tickets in the bug tracking system, that need to be triaged.</li>
<li>Overdue code reviews.</li>
</ul>

<p>Information tiles:</p>

<ul>
<li>Recent commits. This shows what we're working on.</li>
<li>Beer clock: On Fridays, how many hours to free beer.</li>
<li>Assigned tickets. Tickets we're working on.</li>
<li>Test coverage.</li>
</ul>

<p>What do you notice here? More tiles are actionable rather than informative, and therefore more useful. The current weather or the company stock prices do not feature. It's not an executive dashboard, it is a team dashboard.</p>

<p>What else do you notice? Each metrics comes from a different system. Build information might be from Jenkins or Bamboo, tickets from JIRA or RT, and the timesheet information might be <a href="http://www.youtube.com/watch?v=cJMRKB3RU_s">from a spreadsheet</a>. This means you'll need to write a script to periodically extract the data and post it to the dashboard - there's a good chance you won't find a built it one that fits your exact requirements. Assume you'll need to write some of you own, but do not fear - this is almost trivially easy!</p>

<h2>Creating a Widget</h2>

<p>This tutorial will create a dashboard with a single widget:</p>

<p><img src="https://raw.github.com/alexec/dashing-example/master/screenshot.png"/></p>

<p>To install Dashing you need Ruby 1.9 (I'd recommend <a href="https://rvm.io">RVM</a>), and then execute:</p>

<pre><code>gem install dashing
dashing new example-dashboard
cd example-dashboard
bundle install &amp;&amp; dashing start
</code></pre>

<p>This creates a set of samples you can look at by navigating to <a href="http://localhost:3030/sample">http://localhost:3030/sample</a>.</p>

<p>Lets create a widget that shows informatain about failing builds. It'll be closely related to <a href="https://gist.github.com/EHadoux/5196209">a Sonar Gist</a>, and follows a common set-of steps:</p>

<ul>
<li>Get same data from a URL, possbily having to authenticate.</li>
<li>Parse that data (if it is HTML we can <a href="http://mechanize.rubyforge.org">use Mechianize</a>).</li>
<li>Loop though the data to find the interesting information.</li>
<li>Filter that information, e.g. based on status.</li>
<li>Post that information to one of more widgets.</li>
</ul>

<pre><code>
    SCHEDULER.every '15m', :first_in => 0 do |job|
        builds=config[:builds].map{|repo|
            status=JSON(get("https://api.travis-ci.org/repositories/#{config[:user]}//#{repo}/builds.json"))[0]['result']?'ok':'failing'
            {:repo => repo, :status => status}
        }
        failing_builds=builds.find_all{|build| build[:status]!='ok'}
            send_event('travis_builds', {
            :items => builds.map{|build| {:label => "#{build[:repo]} #{build[:status]}"}},
            :moreinfo => "#{failing_builds.length}/#{builds.length} failing",
            :status => (failing_builds.length>0?'warning':'ok')
        })
    end
</code></pre>

<p>To create the widget I've copied the widgets/list to widgets/travis_builds and added this to the code to change the colour of the widget based on status:</p>

<pre><code>   onData: (data) -&gt;
     if data.status
       # clear existing "status-*" classes
       $(@get('node')).attr 'class', (i,c) -&gt;
         c.replace /status-\\S+/g, ''
       # add new class
       $(@get('node')).addClass "status-#{data.status}"
</code></pre>

<h2>Installing as a On a PC</h2>

<p>You'll want to run this on a Linux computer with a monitor mounted in a suitable place.</p>

<p>I've <a href="https://raw.github.com/alexec/dashing-example/master/dashboard.sh">written a script to start this as service on Linux</a>. You'll need to add a cd to change to the correct directory.</p>

<p>If you want to be eco-friendly you can turn the screen on and off at suitable times using xset, put this in your crontab:</p>

<pre><code># turn on at 9am weekdays
0 9 1-5 * * xset dpms force on
# turn off at 6/7/8pm everyday (just in case it get knocked on by accident)
0 18,19,20 * * * xset dpms force off
</code></pre>

<p>Now you have a few options for the actual display.</p>

<p>A simple and fully featured, but insecure, option would be to use a browser fullscreen and disable the screensaver.</p>

<p>A more secure, but quite hacky option would be to <a href="http://forums.pcbsd.org/showthread.php?t=5878">set-up xscreensaver to rotate thought</a> a directory of <a href="https://github.com/ariya/phantomjs/wiki/Screen-Capture">screenshots taken by phantomjs</a>.</p>

<p>I'd love to hear from anyone with a better compromise!</p>

<h2>References</h2>

<p>Code for this post can be <a href="https://github.com/alexec/dashing-example">found on Github</a>. Another widgets can be <a href="https://github.com/Shopify/dashing/wiki/Additional-Widgets">found amongst the additional widgets page</a>. <a href="http://shopify.github.io/dashing/">The guide</a> gives an example of creating your own widget.</p>
™1375791937€What I'm reading...€<ul>
<li><a href="http://www.darrenmothersele.com/blog/2013/08/02/cms-is-dead-long-live-cms/">CMS is Dead, Long Live CMS</a>, alternatives to CMS.</li>
<li><a href="http://www.servicedesignpatterns.com">Service Design Patterns</a>, how to build service architectures.
<li><a href="http://www.terrypratchettbooks.com/index.php/books/the-long-earth">The Long Earth</a>, Terry Pratchett and Stephen Baxter's fictional world of a infinity of parallel earths</li>
</ul>™1376748169€Git tips: git xpush€I'd recently been suffering from builds failing because people (including myself) had been pushing changes that they hadn't run tests on, or where un-pulled changes had broken their code.

As we use Maven, there's a simple solution to this, git aliases. 

You can add the following to ~/.gitignore:

<code>
[alias]
	xpush = !sh -c 'git pull --no-edit && mvn clean install && git push'
</code>

Now, when you do "git xpush" git pulls any new changes down, rebuilds the app (running the tests) and pushes the changes to the repo.
™1376851347€Dagger DI for Spring Refuges: 10 Tips€  <p class="c0"><span>I've been experimenting with</span>
  <span class="c2"><a class="c3" href=
  "http://square.github.io/dagger/">Dagger</a></span><span>, a
  dependency inject systems. I was drawn to it probably for the
  same reasons as others:</span></p>

  <p class="c1 c0"></p>

  <ul class="c6 lst-kix_e8imrt6jtb8v-0 start">
    <li class="c5 c0"><span>Compile time checking.</span></li>

    <li class="c5 c0"><span>Very small (&lt;100kb), vs Guice
    (~500kb) and Spring (~800kb).</span></li>

    <li class="c5 c0"><span>Fast.</span></li>
  </ul>

  <p class="c0 c1"></p>

  <p class="c0"><span>I've been migrating a</span> <span class=
  "c2"><a class="c3" href=
  "https://github.com/alexec/openbookmaker">toy
  app</a></span><span>&nbsp;</span><span>from Spring, an app which
  uses Spring to create a context which internally sends JMS
  messages around. The app is a bit JEE, whereas I think Dagger is
  aimed at Android.</span></p>

  <p class="c1 c0"></p>

  <p class="c0"><span>What I found:</span></p>

  <p class="c1 c0"></p>

  <ol class="c6 lst-kix_6ljgxlwtxehi-0 start" start="1">
    <li class="c5 c0"><span>Dagger doesn't really like exceptions,
    either thrown from a module method, or from an constructor. I
    ended up creating a fair amount of code to wrap them in
    RTEs.</span></li>

    <li class="c5 c0"><span>Dagger doesn't provide support for bean
    life-cycle management, or hooks e.g. @PostConstruct. I ended up
    writing</span> <span class="c2"><a class="c3" href=
    "https://github.com/alexec/openbookmaker/blob/14af37a9e9a89094fcefd92a2f43393894835f2c/src/main/java/com/alexecollins/openbookmaker/LifeCycleManager.java">
    a solution to this</a></span><span>, but it's poorly designed
    and doesn't have the compile time benefits.</span></li>

    <li class="c5 c0"><span>Like Spring et al, it can't detect
    parameterized classes, e.g. Set&lt;Service&gt;. You'll need to
    use @Named on these.</span></li>

    <li class="c0 c5"><span>There's no in-built support for JNDI,
    but you can</span> <span class="c2"><a class="c3" href=
    "https://github.com/alexec/openbookmaker/blob/14af37a9e9a89094fcefd92a2f43393894835f2c/src/main/java/com/alexecollins/openbookmaker/sports/OpenbookmakerModule.java">
    easily make some</a></span><span>.</span></li>

    <li class="c5 c0"><span>You must either annotate the
    constructor with @Inject, or add the object to your module. If
    you have a no-args constructor, and you don't build it in the
    module, you'll need to create one.</span></li>

    <li class="c5 c0"><span>@Singleton on a class will be ignored
    if the object is specified by the module, you need to
    &nbsp;annotate in the module too.</span></li>

    <li class="c5 c0"><span>Use @Singleton by default, then remove
    if not necessary.</span></li>

    <li class="c5 c0"><span>Dagger only has two scopes: singleton
    and non-singleton. Request and session are not supported. Using
    Provider&lt;MyClass&gt; gives the same effect as
    prototype.</span></li>

    <li class="c5 c0"><span>If need to add any "dangling"
    dependencies to your root (you get a "unused @Provider"
    error).</span></li>

    <li class="c5 c0"><span>When debugging the graph, you can
    visualise the graph by looking at the ${moduleName}.dot
    files.</span></li>
  </ol>

  <p class="c1 c0"></p>

  <p class="c0"><span>Further reading:</span></p>

  <p class="c1 c0"></p>

  <ul class="c6 lst-kix_hjo5a5798cw9-0 start">
    <li class="c5 c0">
    <a href="http://blog.freeside.co/post/41774730401/is-this-a-dagger-i-see-before-me">Is this a dagger is see before me?</a></li>

    <li class="c5 c0">
    <a href="http://dig.floatingsun.net/dagger-vs-guice/">Dagger vs Guice</a></li>
  </ul>™1378045525€Thread Jiggling€<h2>Overview</h2>

<p>Thread jiggler is a simple testing framework for exercising code to find threading problems. It works by modifying classes bytecode at runtime to insert Thread.yield() calls between instructions - "jiggling" the threads. This greatly increases the likelihood of discovering threading issues, and does it without you needing to change your production code.</p>

<h2>Background</h2>

<p>I was recently researching how to test multithreaded code for threading issues, and found out about a tool from IBM called <a href="http://www.almaden.ibm.com/laborday/haifa/projects/verification/contest/index.html">ConTest</a>, but couldn't find any code I could use myself. So naturally, I thought I'd spike my own.</p>

<p>Consider this canonical simple, but thread unsafe class:</p>

<pre><code>public class BadCounter {
    private int count = 0 ;

    public void count() {
        count++;
    }
}
</code></pre>

<p>The count method's byte code is:</p>

<pre><code>ALOAD 0
DUP
GETFIELD asm/Foo.counter : I
ICONST_1
IADD
PUTFIELD asm/Foo.counter : I
</code></pre>

<p>This provides several places where there could be a context switch, which means that count my be increased, but not stored as expected. Let consider a quick unit test:</p>

<pre><code>public class BadCounterTest {
    Counter counter = new BadCounter();
    int n = 1000;

    @Test
    public void singleThreadedTest() throws Exception {

        for (int i = 0; i &lt; n; i++) {
            counter.count();
        }

        assertEquals(n, counter.getCount());
    }
    ...
</code></pre>

<p>This test runs in a single thread, and passes. Lets try and run this on two threads and see if it fails.</p>

<pre><code>    @Test
    public void threadedTest() throws Exception {

        final CompletionService&lt;Void&gt; service = new ExecutorCompletionService&lt;Void&gt;(Executors.newFixedThreadPool(2));

        for (int i = 0; i &lt; n; i++) {
            service.submit(new Callable&lt;Void&gt;() {
                @Override
                public Void call() {
                    counter.count();
                    return null;
                }
            });
        }

        for (int i = 0; i &lt; n; ++i) {
            service.take().get();
        }

        assertEquals(n, counter.getCount());
     }
</code></pre>

<p>This also passes. On my computer I can increase <em>n</em> to 100,000 before it starts to fail consistently.</p>

<pre><code>junit.framework.AssertionFailedError:
Expected :1000000
Actual   :999661
</code></pre>

<p>Just 0.04% of the tests had a problem. What have we learned? We've learned a simple way to run a multithreaded test, but we've learned that, because we can't control when threads do their work, it's a bit trial and error.</p>

<h2>Thread Jiggling</h2>

<p>So one problem exercising code to find threading defects is that you can't control when threads will yield. However, we can re-write the bytecode to insert Thread.yield() into the bytecode between instructions. In the above example we can get the code to produce more issues by changing the bytecode:</p>

<pre><code>ALOAD 0
DUP
GETFIELD asm/Foo.counter : I
INVOKESTATIC java/lang/Thread.yield ()V
ICONST_1
IADD
PUTFIELD asm/Foo.counter : I
</code></pre>

<p>Using ASM, we can create a rewriter to insert these invocations. The JigglingClassLoader re-writes classes on the fly, adding these calls. From this we can create a JUnit runner to run use the new class loader for the test.</p>

<pre><code>@RunWith(JigglingRunner.class)
@Jiggle("threadjiggler.test.*")
public class BadCounterTest {
    ...
}
</code></pre>

<p>Now running the test:</p>

<pre><code>junit.framework.AssertionFailedError:
Expected :1000000
Actual   :836403
</code></pre>

<p>The number of test where we see the threading problem jump to 16%. We've done this with out any recompilation of the code, or impacting on other unit tests running in the same JVM.</p>

<h2>Exercise for the Reader</h2>

<p>SimpleDateFormat is a well know, non-thread safe class in Java. Write a test that jiggles the class. Why is it not thread-safe? How would you rewrite it so that it was thread safe? How can you do so without using a ThreadLocal, locks or synchronisation?</p>

<h2>Source Code</h2>

<p>The code for this can be <a href="https://github.com/alexec/thread-jiggler">found on Github</a>.</p>

<h2>Further Reading</h2>

<p>I've written <a href="http://www.alexecollins.com/content/5-tips-unit-testing-threaded-code">a post on testing threaded code for correctnes</a>. You may also wish to read more generally:</p>

<ul>
<li><a href="ftp://ftp.cs.umanitoba.ca/pub/IPDPS03/DATA/W20_PADTD_02.PDF">Concurrent Bug Patterns and How to Test Them - Eitan Farchi, Yarden Nir, Shmuel Ur IBM Haifa Research Labs</a></li>
<li><a href="http://www.almaden.ibm.com/laborday/haifa/projects/verification/contest/papers/testingConcurrentJune2008ForMS.pdf">A presentation describing the difficulty of testing and debugging concurrent software - Shmuel Ur</a></li>
<li><a href="http://www.ibm.com/developerworks/java/library/j-jtp09263/index.html">Java theory and practice: Characterizing thread safety</a></li>
</ul>
™