<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alex Collins</title>
  <subtitle>Java Blog</subtitle>
  <id>http://www.alexecollins.com/</id>
  <link href="http://www.alexecollins.com/"/>
  <link href="http://www.alexecollins.com/feed.xml" rel="self"/>
  <updated>2015-12-09T01:00:00Z</updated>
  <author>
    <name>Alex Collins</name>
  </author>
  <entry>
    <title>Developing With Docker - The Debug Container</title>
    <link rel="alternate" href="/developing-with-docker-debug-container/"/>
    <id>/developing-with-docker-debug-container/</id>
    <published>2015-12-09T01:00:00Z</published>
    <updated>2015-12-09T01:00:00Z</updated>
    <author>
      <name>Alex Collins</name>
    </author>
    <content type="html">&lt;p&gt;One technique that's proven to be useful over and over again when working with Docker is a &lt;em&gt;Debug Container&lt;/em&gt;. The debug container isn't a proper application, nor is it a one off job. It's simply used for debugging problems. &lt;/p&gt;

&lt;p&gt;Lets have a look at a common problem.&lt;/p&gt;

&lt;h3 id="problem"&gt;Problem&lt;/h3&gt;

&lt;p&gt;You want to connect to get a URL from an application listening on a port, but no connected containers or hosts have curl installed.&lt;/p&gt;

&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;

&lt;p&gt;Create a &lt;em&gt;Debug Container&lt;/em&gt; and link it to the problem container. &lt;/p&gt;

&lt;p&gt;I'm going to assume the container running the app is called &lt;code&gt;foo&lt;/code&gt; here, but change it to whatever you want. Firstly, create the following &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;FROM centos:centos7

RUN yum install -y curl

CMD ["/bin/sleep", "9999"]
&lt;/pre&gt;

&lt;p&gt;Build and tag the image:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;docker build -t debug:1 .
&lt;/pre&gt;

&lt;p&gt;Now we can test it out to run a one off command:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;docker run -ti --rm --link foo:foo debug:1 curl -v http://foo
&lt;/pre&gt;

&lt;h3 id="discussion"&gt;Discussion&lt;/h3&gt;

&lt;p&gt;You can use the image in a number of ways. You can start it up in the background, name it, and then use &lt;code&gt;docker exec&lt;/code&gt;:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;docker run --rm --link foo:foo --name debug debug:1 
docker exec debug curl http://foo
&lt;/pre&gt;

&lt;p&gt;You can run &lt;code&gt;bash&lt;/code&gt; in the container:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;docker run --rm -ti --link foo:foo debug:1 bash
$ curl -v http://foo
$ exit
&lt;/pre&gt;

&lt;p&gt;Or use&lt;code&gt; docker exec&lt;/code&gt;:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;docker run --rm --link foo:foo --name debug debug:1 
docker exec -ti debug bash
$ curl...
&lt;/pre&gt;

&lt;p&gt;When you're pairing, we call this "docker bash" :)&lt;/p&gt;

&lt;p&gt;I hope you've gotten the outline. Here are some thing to consider:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I've used CentOS as my base image, naturally you can use whatever you're comfortable with.&lt;/li&gt;
  &lt;li&gt;You probably want to install more packages. For example, I find &lt;code&gt;telnet&lt;/code&gt; and &lt;code&gt;nslookup&lt;/code&gt; useful.&lt;/li&gt;
  &lt;li&gt;Creating the debug container can be done just when you need it, but you'll save time by doing it up front.&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;sleep&lt;/code&gt; command keeps the conntainer running, but doing nothing.&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;--rm&lt;/code&gt; option to &lt;code&gt;docker run&lt;/code&gt; makes sure the container is removed when no longer in use, this prevent resource leakage.&lt;/li&gt;
  &lt;li&gt;This can also be used in a cluster. As the container is within the cluster's subnet, it'll be subject to all the networking rules and restrictions a normal container would be.&lt;/li&gt;
&lt;/ul&gt;

</content>
  </entry>
  <entry>
    <title>Developing With Docker - Using A Proxy Container To Make Development Easier</title>
    <link rel="alternate" href="/developing-with-docker-proxy-container/"/>
    <id>/developing-with-docker-proxy-container/</id>
    <published>2015-11-28T01:00:00Z</published>
    <updated>2015-11-28T01:00:00Z</updated>
    <author>
      <name>Alex Collins</name>
    </author>
    <content type="html">&lt;p&gt;I've been working with Docker a lot recently. I've started to find issuess when working with several containers. In this post I will show you a solution to the problem of developing containers that expose the same port, with what I call a &lt;strong&gt;proxy container&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As I work on OS-X, these tips will be OS-X + Docker Machine, and Docker Compose based.&lt;/p&gt;

&lt;p&gt;You can find the example on &lt;a href="https://github.com/alexec/docker-proxy-container-example"&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="problem"&gt;Problem&lt;/h3&gt;

&lt;p&gt;So â€“ here's the problem:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You're running a cluster of containers for local development (e.g. using Docker Compose).&lt;/li&gt;
  &lt;li&gt;You'd like to connect to your Docker containers using hostname and port from your host PC. This will mean that you do not need to change any configuration when developing or testing apps to point to your local machine, or to your Docker machine, it should just work.&lt;/li&gt;
  &lt;li&gt;This must work even if you have two containers that are listening on the same port.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;

&lt;p&gt;Have a single public container in your cluster that accepts all HTTP requests, and proxies them to correct container.&lt;/p&gt;

&lt;p&gt;HTTP requests have a header named &lt;code&gt;Host&lt;/code&gt; that contains the name of the host the request was sent to. We can use this in our proxy.&lt;/p&gt;

&lt;p&gt;The steps will be:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Changing the dev machine's &lt;code&gt;/etc/hosts&lt;/code&gt; to send HTTP requests for our services to our Docker machine.&lt;/li&gt;
  &lt;li&gt;Create a proxy container on our Docker machine that inspects the &lt;code&gt;Host&lt;/code&gt; HTTP header, and then proxies the request to the correct container.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To demostrate this, lets have two containers: "foo" and "bar". Both are listening on port 80 and display a simple static web page. If I open &lt;a href="http://foo"&gt;http://foo&lt;/a&gt; in a browser, I should see the HTML page served by the &lt;code&gt;foo&lt;/code&gt; container.&lt;/p&gt;

&lt;p&gt;In a &lt;code&gt;foo&lt;/code&gt; directory, create a &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;FROM nginx:1.9.7

ADD index.html /usr/share/nginx/html/
&lt;/pre&gt;

&lt;p&gt;And an &lt;code&gt;index.html&lt;/code&gt;:&lt;/p&gt;

&lt;pre class="highlight html"&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;Hello Foo!&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;Repeat this for a directory named &lt;code&gt;bar&lt;/code&gt;, but change the &lt;code&gt;index.html&lt;/code&gt; to have different HTML (e.g. "Hello Bar!").&lt;/p&gt;

&lt;p&gt;Create this &lt;code&gt;docker-compose.yml&lt;/code&gt; file in your project root:&lt;/p&gt;

&lt;pre class="highlight yaml"&gt;&lt;span class="s"&gt;foo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;foo&lt;/span&gt;
  &lt;span class="s"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;foo&lt;/span&gt;
&lt;span class="s"&gt;bar&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bar&lt;/span&gt;
  &lt;span class="s"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bar&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;If you run &lt;code&gt;docker-compose up&lt;/code&gt; it will create two Nginx containers that serve two different HTML pages.&lt;/p&gt;

&lt;p&gt;We want to have all requests to &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; sent to our Docker machine. Docker Machine on OS-X by default has the IP &lt;code&gt;192.168.99.100&lt;/code&gt;, so add these lines to your &lt;code&gt;/etc/hosts&lt;/code&gt; file so that requests to those hosts get forwarded:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;192.168.99.100 foo
192.168.99.100 bar
&lt;/pre&gt;

&lt;p&gt;You cannot expose more than one container per machine on port 80. But, you can make a third container called &lt;code&gt;proxy&lt;/code&gt; to sit in front of both of the containers, and proxy requests. In a new directory name &lt;code&gt;proxy&lt;/code&gt;, create the following &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;FROM nginx:1.9.7

ADD default.conf /etc/nginx/conf.d/
&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;default.conf&lt;/code&gt; is an Nginx configuration file. This file forwards requests to containers based on the host name:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;upstream foo {
    server foo;
}
upstream bar {
    server bar;
}
server {
    listen       80;
    server_name  localhost;

    location / {
       proxy_pass http://$host;
    }
}
&lt;/pre&gt;

&lt;p&gt;This configuration will proxy any request to which has a HTTP header of &lt;code&gt;Host: foo&lt;/code&gt; to &lt;code&gt;foo&lt;/code&gt;, and likewise &lt;code&gt;Host: bar&lt;/code&gt; to &lt;code&gt;bar&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Update the &lt;code&gt;docker-compose.yml&lt;/code&gt; file to add the proxy:&lt;/p&gt;

&lt;pre class="highlight yaml"&gt;&lt;span class="s"&gt;foo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;foo&lt;/span&gt;
  &lt;span class="s"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;foo&lt;/span&gt;
&lt;span class="s"&gt;bar&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bar&lt;/span&gt;
  &lt;span class="s"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bar&lt;/span&gt;
&lt;span class="s"&gt;proxy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;proxy&lt;/span&gt;
  &lt;span class="s"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;proxy&lt;/span&gt;
  &lt;span class="s"&gt;links&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;foo&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;bar&lt;/span&gt;
  &lt;span class="s"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;80:80&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;Finally, do &lt;code&gt;docker-compose up&lt;/code&gt; to get them up and running.&lt;/p&gt;

&lt;p&gt;If you request either URL from your host machine, the request will go to the correct container.&lt;/p&gt;

&lt;h3 id="discussion"&gt;Discussion&lt;/h3&gt;

&lt;p&gt;This technique is a good starting point. It's aimed at making development easier, but putting a proxy container in front of a cluster of containers can also be used in production, so that you do not need to expose containers directly.&lt;/p&gt;

&lt;p&gt;The above &lt;code&gt;default.conf&lt;/code&gt; is not secure enough for production. I've used Nginx, as I'm familiar with it, but you could also you HA Proxy for this task.&lt;/p&gt;

&lt;p&gt;In fact, you can do this automatically using &lt;a href="http://jasonwilder.com/blog/2014/03/25/automated-nginx-reverse-proxy-for-docker/"&gt;Jason Wilder's Nginx proxy&lt;/a&gt;, and this is well worthwhile looking at for complex projects.&lt;/p&gt;

&lt;p&gt;This is the first article in a series on &lt;strong&gt;developing with Docker&lt;/strong&gt; I'm planning on writing:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The Proxy Container Pattern&lt;/li&gt;
  &lt;li&gt;The Debug Container&lt;/li&gt;
  &lt;li&gt;Debugging using &lt;code&gt;docker exec&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Routing messages out of a cluster to your local machine.&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
  <entry>
    <title>Practical Java Domain Specific Language Tutorial</title>
    <link rel="alternate" href="/practical-domain-specific-language-tutorial/"/>
    <id>/practical-domain-specific-language-tutorial/</id>
    <published>2015-09-19T17:08:00Z</published>
    <updated>2015-09-19T17:08:00Z</updated>
    <author>
      <name>Alex Collins</name>
    </author>
    <content type="html">&lt;p&gt;This tutorial will teach you how to create a &lt;strong&gt;Domain Special Language (DSL)&lt;/strong&gt; for testing web pages. you'll be taking the canonical &lt;strong&gt;Selenium WebDriver&lt;/strong&gt; hello world â€“ searching using Google, and use it to write a DSL.&lt;/p&gt;

&lt;p&gt;You'll need to be familiar with Java, Maven, and WebDriver would be handy.&lt;/p&gt;

&lt;p&gt;As usual, the code can be found on &lt;a href="https://github.com/alexec/wd-dsl"&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To start with, create the following &lt;code&gt;pom.xml&lt;/code&gt;&lt;/p&gt;

&lt;pre class="highlight xml"&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;project&lt;/span&gt; &lt;span class="na"&gt;xmlns:xsi=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2001/XMLSchema-instance"&lt;/span&gt;
         &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://maven.apache.org/POM/4.0.0"&lt;/span&gt;
         &lt;span class="na"&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class="s"&gt;"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span class="nt"&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;wd-dsl&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;wd-dsl&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0.0-SNAPSHOT&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;selenium.version&amp;gt;&lt;/span&gt;2.47.0&lt;span class="nt"&gt;&amp;lt;/selenium.version&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.codehaus.groovy&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;groovy&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.4.3&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;&amp;lt;!-- test --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;junit&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;junit&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;4.12&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.seleniumhq.selenium&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;selenium-firefox-driver&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${selenium.version}&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.seleniumhq.selenium&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;selenium-support&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${selenium.version}&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;Let's start with a failing test:&lt;/p&gt;

&lt;pre class="highlight java"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Test&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WebDriverDslTest&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Test&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;canRunExample&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;WebDriverDsl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"search-google.groovy"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;And fill out the stub implementation:&lt;/p&gt;

&lt;pre class="highlight java"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WebDriverDsl&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// TODO&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;Not much to look at yet, but lets create an example file for the DSL (save it as &lt;code&gt;src/test/resources/example.groovy&lt;/code&gt;):&lt;/p&gt;

&lt;pre class="highlight groovy"&gt;&lt;span class="n"&gt;wd&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="s2"&gt;"http://www.google.com"&lt;/span&gt;
    &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="s2"&gt;"#lst-ib"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"WebDriver Tutorials"&lt;/span&gt;
    &lt;span class="n"&gt;click&lt;/span&gt; &lt;span class="s2"&gt;"button[type='submit']"&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Selenium Tutorials"&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;displayed&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;Does the syntax look familiar? This is in fact a valid Groovy program, but this requires something boiler plate code to run, so update your class with these lines:&lt;/p&gt;

&lt;pre class="highlight java"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WebDriverDSL&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getResourceAsStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;InputStream&lt;/span&gt; &lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;WebDriverDSL&lt;/span&gt; &lt;span class="n"&gt;dsl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;WebDriverDSL&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;InputStreamReader&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;InputStreamReader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GroovyShell&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Binding&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;singletonMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"wd"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dsl&lt;/span&gt;&lt;span class="o"&gt;)))&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Closure&lt;/span&gt; &lt;span class="n"&gt;cl&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;cl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setDelegate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;cl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setResolveStrategy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Closure&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;DELEGATE_ONLY&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;cl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;call&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;Those lines are pure boiler-plate scaffolding. I'm not going to explain them in any detail, except to say that it tells the Groovy shell how to bind the script to the DSL class.&lt;/p&gt;

&lt;p&gt;Now, try and run your test, you'll get an error:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;groovy.lang.MissingMethodException: No signature of method: Script1$_run_closure1.go() is applicable for argument types: (java.lang.String) values: [http://www.google.com]
&lt;/pre&gt;

&lt;p&gt;This is telling us that &lt;code&gt;WebDriverDsl&lt;/code&gt; is missing a method, so lets add a new field and a new method:&lt;/p&gt;

&lt;pre class="highlight java"&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;WebDriver&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FirefoxDriver&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;go&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;WebDriver should be quit before you close you program, otherwise you might get many open browser which will ultimately crash your computer. Lets update the class to implement &lt;code&gt;AutoCloseable&lt;/code&gt;, and implement the &lt;code&gt;close&lt;/code&gt; method:&lt;/p&gt;

&lt;pre class="highlight java"&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;quit&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;Finally, you need to close it when done, so update the &lt;code&gt;run&lt;/code&gt; method:&lt;/p&gt;

&lt;pre class="highlight java"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;InputStream&lt;/span&gt; &lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WebDriverDSL&lt;/span&gt; &lt;span class="n"&gt;dsl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;WebDriverDSL&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;InputStreamReader&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;InputStreamReader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GroovyShell&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Binding&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;singletonMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"wd"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dsl&lt;/span&gt;&lt;span class="o"&gt;)))&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;Run the test again, you'll see Firefox open up and open the Google search page â€“ we're making progress. This time you'll see a new error:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;groovy.lang.MissingMethodException: No signature of method: Script1$_run_closure1.set() is applicable for argument types: (java.lang.String, java.lang.String) values: [#lst-ib, WebDriver Tutorials]
&lt;/pre&gt;

&lt;p&gt;You can implement this, and we also need to implement the other methods, so let's do them all at once:&lt;/p&gt;

&lt;pre class="highlight java"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;locator&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findElement&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cssSelector&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;locator&lt;/span&gt;&lt;span class="o"&gt;)).&lt;/span&gt;&lt;span class="na"&gt;sendKeys&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;locator&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findElement&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cssSelector&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;locator&lt;/span&gt;&lt;span class="o"&gt;)).&lt;/span&gt;&lt;span class="na"&gt;click&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;Now you have a fully formed, mini-DSL. You can add words to your DSL until you're happy with it!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Sonarqube And Java 8</title>
    <link rel="alternate" href="/sonarqube-and-java-8/"/>
    <id>/sonarqube-and-java-8/</id>
    <published>2015-09-17T09:23:00Z</published>
    <updated>2015-09-17T09:23:00Z</updated>
    <author>
      <name>Alex Collins</name>
    </author>
    <content type="html">&lt;p&gt;This article is some tips and help for setting up Java 8 projects for analysis on Sonarqube. My goal is to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Have static analysis.&lt;/li&gt;
  &lt;li&gt;Have mutation coverage using Pi Test&lt;/li&gt;
  &lt;li&gt;Exclude Lombok and XJB generated classes.&lt;/li&gt;
  &lt;li&gt;Use Maven.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Firstly, it's important to understand some key things about how the Sonar plugin works.  Sonar does static analysis using built in plugins, but test and mutation coverage require Maven plugins to be set-up. This means you need to configure all the plugins in separately.&lt;/p&gt;

&lt;h2 id="static-analysis"&gt;Static Analysis&lt;/h2&gt;
&lt;p&gt;If you need to exclude some source file for static analysis (e.g. generated sources) you need to add a Sonar property. Unusually for a Maven plugin, you can only configure Sonar via properties:&lt;/p&gt;

&lt;pre class="highlight xml"&gt;&lt;span class="nt"&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;sonar.exclusions&amp;gt;&lt;/span&gt;**/generated-sources/**&lt;span class="nt"&gt;&amp;lt;/sonar.exclusions&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;If your generated files are elsewhere, you'll need to change this.&lt;/p&gt;

&lt;h2 id="jacoco"&gt;Jacoco&lt;/h2&gt;
&lt;p&gt;Jacoco allows you to gather coverage metrics. It attaches to the JVM when Surefire runs your tests to do this, so you need to tell it prepare an agent:&lt;/p&gt;

&lt;pre class="highlight xml"&gt;&lt;span class="nt"&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.jacoco&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jacoco-maven-plugin&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- newer versions do not work with Sonar --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.7.4.201502262128&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;phase&amp;gt;&lt;/span&gt;initialize&lt;span class="nt"&gt;&amp;lt;/phase&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
               &lt;span class="nt"&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;prepare-agent&lt;span class="nt"&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;	    
&lt;span class="nt"&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://projectlombok.org"&gt;Lombok&lt;/a&gt; generates code from annotated class. You'd want to exclude this generated code from analysis and from test coverage. Therefore you need to configure both Sonar and Jacoco.&lt;/p&gt;

&lt;p&gt;Lombok annotated fields and methods with &lt;code&gt;@SuppressWarnings("all")&lt;/code&gt;. Jacoco ignores this. It does not support exclusion by annotation. You must do this manually:&lt;/p&gt;

&lt;pre class="highlight xml"&gt;&lt;span class="nt"&gt;&amp;lt;sonar.exclusions&amp;gt;&lt;/span&gt;
	**/generated-sources/**,\
	**/mypackage/MyVO.java
&lt;span class="nt"&gt;&amp;lt;sonar.exclusions&amp;gt;&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;You'll need to update this every time you add a new VO.&lt;/p&gt;

&lt;h2 id="pitest"&gt;PiTest&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://pitest.org"&gt;PiTest&lt;/a&gt; is a mutation coverage tool that help you find untested or redundant code. You need to install &lt;a href="https://github.com/SonarCommunity/sonar-pitest"&gt;the plugin&lt;/a&gt; into Sonar.&lt;/p&gt;

&lt;pre class="highlight xml"&gt;&lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.pitest&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;pitest-maven&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.1.6&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;targetClasses&amp;gt;&lt;/span&gt;
    	&lt;span class="c"&gt;&amp;lt;!-- specify which classes you want mutation coverage on --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;targetClass&amp;gt;&lt;/span&gt;mypackage*&lt;span class="nt"&gt;&amp;lt;/targetClass&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/targetClasses&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;targetTests&amp;gt;&lt;/span&gt;
    	 &lt;span class="c"&gt;&amp;lt;!-- if your project has *IT integration tests, and they are slow, you probably only want to include normal tests --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;targetTest&amp;gt;&lt;/span&gt;mypackage*Test&lt;span class="nt"&gt;&amp;lt;/targetTest&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/targetTests&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;outputFormats&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;&amp;lt;!-- Sonar needs the XML output --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;outputFormat&amp;gt;&lt;/span&gt;XML&lt;span class="nt"&gt;&amp;lt;/outputFormat&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;outputFormat&amp;gt;&lt;/span&gt;HTML&lt;span class="nt"&gt;&amp;lt;/outputFormat&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/outputFormats&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Sonar expects reports not to have timestamps --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;timestampedReports&amp;gt;&lt;/span&gt;false&lt;span class="nt"&gt;&amp;lt;/timestampedReports&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;To enable PiTest on Sonar, use this property:&lt;/p&gt;

&lt;pre class="highlight xml"&gt;&lt;span class="nt"&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;sonar.pitest.mode&amp;gt;&lt;/span&gt;active&lt;span class="nt"&gt;&amp;lt;/sonar.pitest.mode&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;Finally, you can create your analysis using:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;mvn clean install 
mvn sonar:sonar
&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Spring Boot Performance</title>
    <link rel="alternate" href="/spring-boot-performance/"/>
    <id>/spring-boot-performance/</id>
    <published>2015-09-05T09:03:00Z</published>
    <updated>2015-09-05T09:03:00Z</updated>
    <author>
      <name>Alex Collins</name>
    </author>
    <content type="html">&lt;p&gt;This is an article on how to improve the performance of Spring Boot applications. I've recently been working on a new project. As we primarily use Java and Spring, we've been looking at &lt;strong&gt;Spring Boot&lt;/strong&gt;.  It's allowed us to get up and running quickly. &lt;/p&gt;

&lt;p&gt;Early on, I came across a problem with a prototype for one of our new applications. It was loading the Velocity web page template engine. I could not understand why â€“ it was just some REST services, no web pages. I spent a bit of time looking into this issue, and how to improve the performance of Spring Boot applications, and this is what I found.&lt;/p&gt;

&lt;h2 id="component-scanning-slows-start-up"&gt;Component Scanning Slows Start-up&lt;/h2&gt;
&lt;p&gt;By default, you may find yourself using the &lt;a href="http://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/autoconfigure/SpringBootApplication.html"&gt;&lt;code&gt;@SpringBootApplication&lt;/code&gt;&lt;/a&gt; annotation to get your application configured automatically. This has a couple of side-effects. One is to enable &lt;strong&gt;component scanning&lt;/strong&gt;. This looks through the classes to find ones annotated with Spring "stereotypes", such as &lt;code&gt;@Component&lt;/code&gt;. This is convenient, especially when you start out, but it has two side-effects:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It slows application start-up time. This will have a greater impact if you have a large application, or a large number of integration tests that need to start up the application to run.&lt;/li&gt;
  &lt;li&gt;It may load beans you don't want or need. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can disable component scanning by removing the &lt;code&gt;@SpringBootApplication&lt;/code&gt; and &lt;code&gt;@ComponentScan&lt;/code&gt; annotations. You'll then need to make each bean explicit in your configuration.&lt;/p&gt;

&lt;pre class="highlight java"&gt;&lt;span class="c1"&gt;// remove @SpringBootApplication and @ComponentScan, replace with @EnableAutoConfiguration&lt;/span&gt;
&lt;span class="nd"&gt;@Configuration&lt;/span&gt;
&lt;span class="nd"&gt;@EnableAutoConfiguration&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SampleWebUiApplication&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

	&lt;span class="c1"&gt;// ...&lt;/span&gt;

	&lt;span class="c1"&gt;// you must explicitly list all beans that were being component scanned	@Bean&lt;/span&gt;
	&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;MessageController&lt;/span&gt; &lt;span class="n"&gt;messageController&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MessageRepository&lt;/span&gt; &lt;span class="n"&gt;messageRepository&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
		&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MessageController&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;messageRepository&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
	&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;h2 id="auto-configuration-can-load-more-than-you-need"&gt;Auto-Configuration Can Load More Than You Need&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;@SpringBootApplication&lt;/code&gt; annotation implies the &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; annotation. This enables auto-configuration. This can load components you don't need, slowing application start-up and increasing memory and CPU usage. Lets look at how to use this in a more controlled fashion.&lt;/p&gt;

&lt;p&gt;If you start your application using &lt;code&gt;-Ddebug&lt;/code&gt; it'll print a report of the components it auto-configures:&lt;/p&gt;

&lt;pre class="highlight shell"&gt;mvn spring-boot:run -Ddebug
â€¦
&lt;span class="o"&gt;=========================&lt;/span&gt;
AUTO-CONFIGURATION REPORT
&lt;span class="o"&gt;=========================&lt;/span&gt;


Positive matches:
-----------------

   DispatcherServletAutoConfiguration
      - @ConditionalOnClass classes found: org.springframework.web.servlet.DispatcherServlet &lt;span class="o"&gt;(&lt;/span&gt;OnClassCondition&lt;span class="o"&gt;)&lt;/span&gt;
      - found web application StandardServletEnvironment &lt;span class="o"&gt;(&lt;/span&gt;OnWebApplicationCondition&lt;span class="o"&gt;)&lt;/span&gt;

...
&lt;/pre&gt;

&lt;p&gt;Copy the classes mentioned in the ""positive matches" section of the report:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;DispatcherServletAutoConfiguration
EmbeddedServletContainerAutoConfiguration
ErrorMvcAutoConfiguration
HttpEncodingAutoConfiguration
HttpMessageConvertersAutoConfiguration
JacksonAutoConfiguration
JmxAutoConfiguration
MultipartAutoConfiguration
ServerPropertiesAutoConfiguration
PropertyPlaceholderAutoConfiguration
ThymeleafAutoConfiguration
WebMvcAutoConfiguration
WebSocketAutoConfiguration
&lt;/pre&gt;

&lt;p&gt;Update your configuration to explicitly import them, and run your tests to make sure everything is OK.&lt;/p&gt;

&lt;pre class="highlight java"&gt;&lt;span class="nd"&gt;@Configuration&lt;/span&gt;
&lt;span class="nd"&gt;@Import&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;
        &lt;span class="n"&gt;DispatcherServletAutoConfiguration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;EmbeddedServletContainerAutoConfiguration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ErrorMvcAutoConfiguration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;HttpEncodingAutoConfiguration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;HttpMessageConvertersAutoConfiguration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;JacksonAutoConfiguration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;JmxAutoConfiguration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;MultipartAutoConfiguration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ServerPropertiesAutoConfiguration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;PropertyPlaceholderAutoConfiguration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ThymeleafAutoConfiguration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;WebMvcAutoConfiguration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;WebSocketAutoConfiguration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;})&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SampleWebUiApplication&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;I can see that both JMX and web sockets are listed, but I know I'm not using them. I can delete them, and any other dependencies I don't need, to get a performance improvement.  Run your tests again to make sure everything is OK.&lt;/p&gt;

&lt;h2 id="change-servlet-container-to-undertow"&gt;Change Servlet Container To Undertow&lt;/h2&gt;
&lt;p&gt;By default, Spring Boot uses Tomcat. Tomcat uses around 110mb of heap, and has ~16 threads: &lt;/p&gt;

&lt;p&gt;&lt;img alt="tomcat" src="/images/tomcat-spring-boot-jvisualvm.png" /&gt;&lt;/p&gt;

&lt;p&gt;Undertow is a lightweight servlet container from JBoss. You can &lt;a href="http://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-servlet-containers.html#howto-use-undertow-instead-of-tomcat"&gt;switch to Undertow&lt;/a&gt; to get a performance improvement. Firstly, exclude Tomcat from your dependencies:&lt;/p&gt;

&lt;pre class="highlight xml"&gt;&lt;span class="nt"&gt;&amp;lt;exclusions&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;exclusion&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-tomcat&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/exclusions&amp;gt;&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;Add Undertow:    &lt;/p&gt;

&lt;pre class="highlight xml"&gt;&lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-undertow&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;Undertow uses around 90MB and has ~13 threads: &lt;/p&gt;

&lt;p&gt;&lt;img alt="undertow" src="/images/undertow-spring-boot-jvisualvm.png" /&gt;&lt;/p&gt;

&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;These are a few small tips on improving the performance of your Spring Boot applications. The benefits are smaller for smaller applications, but for larger applications can quickly become pronounced. Try it out and tell me what you think.&lt;/p&gt;

&lt;p&gt;As usual, &lt;a href="https://github.com/alexec/spring-boot-performance"&gt;the code is on Github&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://www.techempower.com/benchmarks/"&gt;https://www.techempower.com/benchmarks/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://cloud.google.com/appengine/articles/spring_optimization"&gt;https://cloud.google.com/appengine/articles/spring_optimization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Testing Anti-Patterns</title>
    <link rel="alternate" href="/testing-anti-patterns/"/>
    <id>/testing-anti-patterns/</id>
    <published>2015-06-23T20:52:00Z</published>
    <updated>2015-06-23T20:52:00Z</updated>
    <author>
      <name>Alex Collins</name>
    </author>
    <content type="html">&lt;p&gt;My spare time has been super-busy &lt;a href="http://selenium-webdriver-in-practice.github.io"&gt;writing my book&lt;/a&gt;, doing speeches, and going to conferences. Here are some slides I'm drafting for a future Meetup presentation I'm working on:&lt;/p&gt;

&lt;iframe src="//slides.com/alexec/testing-anti-patterns/embed" width="576" height="420" scrolling="no" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""&gt;&lt;/iframe&gt;

</content>
  </entry>
</feed>
